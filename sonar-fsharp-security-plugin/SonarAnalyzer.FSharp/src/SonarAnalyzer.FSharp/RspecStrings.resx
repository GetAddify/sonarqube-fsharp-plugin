<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="S100_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S100_Description" xml:space="preserve">
    <value>Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not method and property names are PascalCased. To reduce noise, two consecutive upper case characters are allowed unless they form the whole name. So, MyXMethod is compliant, but XM on its own is not.</value>
  </data>
  <data name="S100_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S100_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S100_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S100_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S100_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S100_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S100_Title" xml:space="preserve">
    <value>Methods and properties should be named in PascalCase</value>
  </data>
  <data name="S100_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1006_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S1006_Description" xml:space="preserve">
    <value>Default arguments are determined by the static type of the object. If a default argument is different for a parameter in an overriding method, the value used in the call will be different when calls are made via the base or derived object, which may be contrary to developer expectations. </value>
  </data>
  <data name="S1006_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1006_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1006_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S1006_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1006_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S1006_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S1006_Title" xml:space="preserve">
    <value>Method overrides should not change parameter defaults</value>
  </data>
  <data name="S1006_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S101_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S101_Description" xml:space="preserve">
    <value>Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not type names are using PascalCase. To reduce noise, two consecutive upper case characters are allowed unless they form the whole type name. So, MyXClass is compliant, but XC on its own is not.</value>
  </data>
  <data name="S101_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S101_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S101_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S101_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S101_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S101_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S101_Title" xml:space="preserve">
    <value>Types should be named in PascalCase</value>
  </data>
  <data name="S101_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S103_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S103_Description" xml:space="preserve">
    <value>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</value>
  </data>
  <data name="S103_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S103_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S103_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S103_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S103_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S103_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S103_Title" xml:space="preserve">
    <value>Lines should not be too long</value>
  </data>
  <data name="S103_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S104_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S104_Description" xml:space="preserve">
    <value>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those smaller files will not only be easier to understand but also probably easier to test.</value>
  </data>
  <data name="S104_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S104_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S104_RemediationCost" xml:space="preserve">
    <value>1h</value>
  </data>
  <data name="S104_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S104_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S104_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S104_Title" xml:space="preserve">
    <value>Files should not have too many lines of code</value>
  </data>
  <data name="S104_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1048_Category" xml:space="preserve">
    <value>Blocker Bug</value>
  </data>
  <data name="S1048_Description" xml:space="preserve">
    <value>If Finalize or an override of Finalize throws an exception, and the runtime is not hosted by an application that overrides the default policy, the runtime terminates the process immediately without graceful cleanup (finally blocks and finalizers are not executed). This behavior ensures process integrity if the finalizer cannot free or destroy resources.</value>
  </data>
  <data name="S1048_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1048_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1048_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S1048_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1048_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S1048_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1048_Title" xml:space="preserve">
    <value>Destructors should not throw exceptions</value>
  </data>
  <data name="S1048_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S105_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S105_Description" xml:space="preserve">
    <value>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</value>
  </data>
  <data name="S105_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S105_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S105_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S105_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S105_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S105_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S105_Title" xml:space="preserve">
    <value>Tabulation characters should not be used</value>
  </data>
  <data name="S105_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S106_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S106_Description" xml:space="preserve">
    <value>When logging a message there are several important requirements which must be fulfilled:</value>
  </data>
  <data name="S106_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S106_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S106_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S106_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S106_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S106_Tags" xml:space="preserve">
    <value>bad-practice</value>
  </data>
  <data name="S106_Title" xml:space="preserve">
    <value>Standard outputs should not be used directly to log anything</value>
  </data>
  <data name="S106_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1066_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1066_Description" xml:space="preserve">
    <value>Merging collapsible if statements increases the code's readability.</value>
  </data>
  <data name="S1066_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1066_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1066_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1066_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1066_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1066_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S1066_Title" xml:space="preserve">
    <value>Collapsible "if" statements should be merged</value>
  </data>
  <data name="S1066_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1067_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S1067_Description" xml:space="preserve">
    <value>The complexity of an expression is defined by the number of &amp;&amp;, || and condition ? ifTrue : ifFalse operators it contains.</value>
  </data>
  <data name="S1067_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1067_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1067_RemediationCost" xml:space="preserve">
    <value>3min</value>
  </data>
  <data name="S1067_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1067_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S1067_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S1067_Title" xml:space="preserve">
    <value>Expressions should not be too complex</value>
  </data>
  <data name="S1067_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S107_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S107_Description" xml:space="preserve">
    <value>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.</value>
  </data>
  <data name="S107_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S107_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S107_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S107_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S107_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S107_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S107_Title" xml:space="preserve">
    <value>Methods should not have too many parameters</value>
  </data>
  <data name="S107_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1075_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1075_Description" xml:space="preserve">
    <value>Hardcoding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems usually differ from the development environment, ...etc. For all those reasons, a URI should never be hardcoded. Instead, it should be replaced by customizable parameter.</value>
  </data>
  <data name="S1075_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1075_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1075_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S1075_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1075_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1075_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1075_Title" xml:space="preserve">
    <value>URIs should not be hardcoded</value>
  </data>
  <data name="S1075_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S108_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S108_Description" xml:space="preserve">
    <value>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</value>
  </data>
  <data name="S108_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S108_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S108_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S108_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S108_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S108_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S108_Title" xml:space="preserve">
    <value>Nested blocks of code should not be left empty</value>
  </data>
  <data name="S108_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S109_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S109_Description" xml:space="preserve">
    <value>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the number of iterations of a loops, to test the value of a property, etc.</value>
  </data>
  <data name="S109_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S109_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S109_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S109_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S109_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S109_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S109_Title" xml:space="preserve">
    <value>Magic numbers should not be used</value>
  </data>
  <data name="S109_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S110_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S110_Description" xml:space="preserve">
    <value>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by creating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating a deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object oriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</value>
  </data>
  <data name="S110_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S110_Remediation" xml:space="preserve">
    <value />
  </data>
  <data name="S110_RemediationCost" xml:space="preserve">
    <value />
  </data>
  <data name="S110_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S110_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S110_Tags" xml:space="preserve">
    <value>design</value>
  </data>
  <data name="S110_Title" xml:space="preserve">
    <value>Inheritance tree of classes should not be too deep</value>
  </data>
  <data name="S110_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1104_Category" xml:space="preserve">
    <value>Minor Vulnerability</value>
  </data>
  <data name="S1104_Description" xml:space="preserve">
    <value>Public fields in public classes do not respect the encapsulation principle and has three main disadvantages:</value>
  </data>
  <data name="S1104_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1104_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1104_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1104_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1104_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1104_Tags" xml:space="preserve">
    <value>cwe</value>
  </data>
  <data name="S1104_Title" xml:space="preserve">
    <value>Fields should not have public accessibility</value>
  </data>
  <data name="S1104_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S1109_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1109_Description" xml:space="preserve">
    <value>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the beginning of a line.</value>
  </data>
  <data name="S1109_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1109_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1109_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S1109_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1109_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1109_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S1109_Title" xml:space="preserve">
    <value>A close curly brace should be located at the beginning of a line</value>
  </data>
  <data name="S1109_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1110_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1110_Description" xml:space="preserve">
    <value>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But redundant pairs of parentheses could be misleading, and should be removed. </value>
  </data>
  <data name="S1110_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1110_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1110_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S1110_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1110_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1110_Tags" xml:space="preserve">
    <value>confusing</value>
  </data>
  <data name="S1110_Title" xml:space="preserve">
    <value>Redundant pairs of parentheses should be removed</value>
  </data>
  <data name="S1110_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1116_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1116_Description" xml:space="preserve">
    <value>Empty statements, i.e. ;, are usually introduced by mistake, for example because:</value>
  </data>
  <data name="S1116_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1116_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1116_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S1116_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1116_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1116_Tags" xml:space="preserve">
    <value>unused</value>
  </data>
  <data name="S1116_Title" xml:space="preserve">
    <value>Empty statements should be removed</value>
  </data>
  <data name="S1116_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1117_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1117_Description" xml:space="preserve">
    <value>Overriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of code. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.</value>
  </data>
  <data name="S1117_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1117_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1117_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1117_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1117_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1117_Tags" xml:space="preserve">
    <value>suspicious,pitfall</value>
  </data>
  <data name="S1117_Title" xml:space="preserve">
    <value>Local variables should not shadow class fields</value>
  </data>
  <data name="S1117_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1118_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1118_Description" xml:space="preserve">
    <value>Utility classes, which are collections of static members, are not meant to be instantiated.</value>
  </data>
  <data name="S1118_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1118_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1118_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1118_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1118_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1118_Tags" xml:space="preserve">
    <value>design</value>
  </data>
  <data name="S1118_Title" xml:space="preserve">
    <value>Utility classes should not have public constructors</value>
  </data>
  <data name="S1118_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S112_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S112_Description" xml:space="preserve">
    <value>Throwing such general exceptions as Exception, SystemException, ApplicationException, IndexOutOfRangeException, NullReferenceException, OutOfMemoryException and ExecutionEngineException prevents calling methods from handling true, system-generated exceptions differently than application-generated errors. </value>
  </data>
  <data name="S112_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S112_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S112_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S112_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S112_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S112_Tags" xml:space="preserve">
    <value>cwe,error-handling</value>
  </data>
  <data name="S112_Title" xml:space="preserve">
    <value>General exceptions should never be thrown</value>
  </data>
  <data name="S112_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1121_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1121_Description" xml:space="preserve">
    <value>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have side-effects.</value>
  </data>
  <data name="S1121_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1121_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1121_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1121_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1121_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1121_Tags" xml:space="preserve">
    <value>cwe,suspicious</value>
  </data>
  <data name="S1121_Title" xml:space="preserve">
    <value>Assignments should not be made from within sub-expressions</value>
  </data>
  <data name="S1121_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1123_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1123_Description" xml:space="preserve">
    <value>The Obsolete attribute can be applied with or without arguments, but marking something Obsolete without including advice as to why it's obsolete or on what to use instead will lead maintainers to waste time trying to figure those things out - every single time the warning is encountered.</value>
  </data>
  <data name="S1123_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1123_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1123_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1123_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1123_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1123_Tags" xml:space="preserve">
    <value>obsolete,bad-practice</value>
  </data>
  <data name="S1123_Title" xml:space="preserve">
    <value>"Obsolete" attributes should include explanations</value>
  </data>
  <data name="S1123_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1125_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1125_Description" xml:space="preserve">
    <value>Redundant Boolean literals should be removed from expressions to improve readability.</value>
  </data>
  <data name="S1125_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1125_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1125_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1125_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1125_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1125_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S1125_Title" xml:space="preserve">
    <value>Boolean literals should not be redundant</value>
  </data>
  <data name="S1125_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S113_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S113_Description" xml:space="preserve">
    <value>Some tools work better when files end with an empty line.</value>
  </data>
  <data name="S113_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S113_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S113_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S113_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S113_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S113_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S113_Title" xml:space="preserve">
    <value>Files should contain an empty newline at the end</value>
  </data>
  <data name="S113_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1134_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1134_Description" xml:space="preserve">
    <value>FIXME tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</value>
  </data>
  <data name="S1134_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1134_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1134_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1134_Tags" xml:space="preserve">
    <value>cwe</value>
  </data>
  <data name="S1134_Title" xml:space="preserve">
    <value>Track uses of "FIXME" tags</value>
  </data>
  <data name="S1134_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1135_Category" xml:space="preserve">
    <value>Info Code Smell</value>
  </data>
  <data name="S1135_Description" xml:space="preserve">
    <value>TODO tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</value>
  </data>
  <data name="S1135_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1135_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1135_Severity" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="S1135_Tags" xml:space="preserve">
    <value>cwe</value>
  </data>
  <data name="S1135_Title" xml:space="preserve">
    <value>Track uses of "TODO" tags</value>
  </data>
  <data name="S1135_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1144_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1144_Description" xml:space="preserve">
    <value>private or internal types or private members that are never executed or referenced are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</value>
  </data>
  <data name="S1144_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1144_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1144_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1144_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1144_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1144_Tags" xml:space="preserve">
    <value>unused</value>
  </data>
  <data name="S1144_Title" xml:space="preserve">
    <value>Unused private types or members should be removed</value>
  </data>
  <data name="S1144_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1145_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S1145_Description" xml:space="preserve">
    <value>if statements with conditions that are always false have the effect of making blocks of code non-functional. if statements with conditions that are always true are completely redundant, and make the code less readable.</value>
  </data>
  <data name="S1145_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1145_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1145_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S1145_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1145_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1145_Tags" xml:space="preserve">
    <value>cwe</value>
  </data>
  <data name="S1145_Title" xml:space="preserve">
    <value>Useless "if(true) {...}" and "if(false){...}" blocks should be removed</value>
  </data>
  <data name="S1145_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S1147_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S1147_Description" xml:space="preserve">
    <value>Calling Environment.Exit(exitCode) or Application.Exit() terminates the process and returns an exit code to the operating system..</value>
  </data>
  <data name="S1147_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1147_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1147_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S1147_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1147_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S1147_Tags" xml:space="preserve">
    <value>cwe,suspicious</value>
  </data>
  <data name="S1147_Title" xml:space="preserve">
    <value>Exit methods should not be called</value>
  </data>
  <data name="S1147_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1151_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1151_Description" xml:space="preserve">
    <value>The switch statement should be used only to clearly define some new branches in the control flow. As soon as a case clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the case clause should be extracted into a dedicated method.</value>
  </data>
  <data name="S1151_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1151_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1151_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1151_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1151_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1151_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S1151_Title" xml:space="preserve">
    <value>"switch case" clauses should not have too many lines of code</value>
  </data>
  <data name="S1151_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1155_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1155_Description" xml:space="preserve">
    <value>Using .Count() to test for emptiness works, but using .Any() makes the intent clearer, and the code more readable. However, there are some cases where special attention should be paid:</value>
  </data>
  <data name="S1155_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1155_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1155_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S1155_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1155_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1155_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S1155_Title" xml:space="preserve">
    <value>"Any()" should be used to test for emptiness</value>
  </data>
  <data name="S1155_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1163_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S1163_Description" xml:space="preserve">
    <value>Throwing an exception from within a finally block will mask any exception which was previously thrown in the try or catch block, and the masked's exception message and stack trace will be lost.</value>
  </data>
  <data name="S1163_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1163_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1163_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S1163_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1163_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S1163_Tags" xml:space="preserve">
    <value>error-handling,suspicious</value>
  </data>
  <data name="S1163_Title" xml:space="preserve">
    <value>Exceptions should not be thrown in finally blocks</value>
  </data>
  <data name="S1163_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1168_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1168_Description" xml:space="preserve">
    <value>Returning null instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more complex and less readable.</value>
  </data>
  <data name="S1168_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1168_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1168_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S1168_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1168_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1168_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1168_Title" xml:space="preserve">
    <value>Empty arrays and collections should be returned instead of null</value>
  </data>
  <data name="S1168_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1172_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1172_Description" xml:space="preserve">
    <value>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</value>
  </data>
  <data name="S1172_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1172_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1172_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1172_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1172_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1172_Tags" xml:space="preserve">
    <value>unused</value>
  </data>
  <data name="S1172_Title" xml:space="preserve">
    <value>Unused method parameters should be removed</value>
  </data>
  <data name="S1172_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1185_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1185_Description" xml:space="preserve">
    <value>Overriding a method just to call the same method from the base class without performing any other actions is useless and misleading. The only time this is justified is in sealed overriding methods, where the effect is to lock in the parent class behavior. This rule ignores overrides of Equals and GetHashCode.</value>
  </data>
  <data name="S1185_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1185_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1185_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S1185_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1185_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1185_Tags" xml:space="preserve">
    <value>redundant,clumsy</value>
  </data>
  <data name="S1185_Title" xml:space="preserve">
    <value>Overriding members should do more than simply call the same member in the base class</value>
  </data>
  <data name="S1185_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1186_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S1186_Description" xml:space="preserve">
    <value>There are several reasons for a method not to have a method body:</value>
  </data>
  <data name="S1186_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1186_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1186_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1186_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1186_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S1186_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S1186_Title" xml:space="preserve">
    <value>Methods should not be empty</value>
  </data>
  <data name="S1186_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1192_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1192_Description" xml:space="preserve">
    <value>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</value>
  </data>
  <data name="S1192_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1192_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1192_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1192_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1192_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1192_Tags" xml:space="preserve">
    <value>design</value>
  </data>
  <data name="S1192_Title" xml:space="preserve">
    <value>String literals should not be duplicated</value>
  </data>
  <data name="S1192_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1200_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1200_Description" xml:space="preserve">
    <value>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book "Principles of Object Oriented Design", a class should have only one responsibility:</value>
  </data>
  <data name="S1200_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1200_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1200_RemediationCost" xml:space="preserve">
    <value>2h</value>
  </data>
  <data name="S1200_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1200_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1200_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S1200_Title" xml:space="preserve">
    <value>Classes should not be coupled to too many other classes (Single Responsibility Principle)</value>
  </data>
  <data name="S1200_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1206_Category" xml:space="preserve">
    <value>Minor Bug</value>
  </data>
  <data name="S1206_Description" xml:space="preserve">
    <value>There is a contract between Equals(object) and GetHashCode(): If two objects are equal according to the Equals(object) method, then calling GetHashCode() on each of them must yield the same result. If this is not the case, many collections won't handle class instances correctly.</value>
  </data>
  <data name="S1206_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1206_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1206_RemediationCost" xml:space="preserve">
    <value>15 min</value>
  </data>
  <data name="S1206_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1206_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1206_Tags" xml:space="preserve">
    <value>cwe</value>
  </data>
  <data name="S1206_Title" xml:space="preserve">
    <value>"Equals(Object)" and "GetHashCode()" should be overridden in pairs</value>
  </data>
  <data name="S1206_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S121_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S121_Description" xml:space="preserve">
    <value>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</value>
  </data>
  <data name="S121_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S121_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S121_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S121_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S121_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S121_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S121_Title" xml:space="preserve">
    <value>Control structures should use curly braces</value>
  </data>
  <data name="S121_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1210_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1210_Description" xml:space="preserve">
    <value>When you implement IComparable or IComparable&lt;T&gt; on a class you should also override Equals(object) and overload the comparison operators (==, !=, &lt;, &lt;=, &gt;, &gt;=). That's because the CLR cannot automatically call your CompareTo implementation from Equals(object) or from the base comparison operator implementations. Additionally, it is best practice to override GetHashCode along with Equals.</value>
  </data>
  <data name="S1210_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1210_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1210_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S1210_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1210_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1210_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1210_Title" xml:space="preserve">
    <value>"Equals" and the comparison operators should be overridden when implementing "IComparable"</value>
  </data>
  <data name="S1210_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1215_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S1215_Description" xml:space="preserve">
    <value>Calling GC.Collect is rarely necessary, and can significantly affect application performance. That's because it triggers a blocking operation that examines every object in memory for cleanup. Further, you don't have control over when this blocking cleanup will actually run.</value>
  </data>
  <data name="S1215_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1215_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1215_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S1215_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1215_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S1215_Tags" xml:space="preserve">
    <value>performance,unpredictable,bad-practice</value>
  </data>
  <data name="S1215_Title" xml:space="preserve">
    <value>"GC.Collect" should not be called</value>
  </data>
  <data name="S1215_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S122_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S122_Description" xml:space="preserve">
    <value>For better readability, do not put more than one statement on a single line.</value>
  </data>
  <data name="S122_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S122_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S122_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S122_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S122_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S122_Tags" xml:space="preserve">
    <value>style</value>
  </data>
  <data name="S122_Title" xml:space="preserve">
    <value>Statements should be on separate lines</value>
  </data>
  <data name="S122_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1226_Category" xml:space="preserve">
    <value>Minor Bug</value>
  </data>
  <data name="S1226_Description" xml:space="preserve">
    <value>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug. Instead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as final, then at least read before reassignment.</value>
  </data>
  <data name="S1226_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1226_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1226_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1226_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1226_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1226_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1226_Title" xml:space="preserve">
    <value>Method parameters, caught exceptions and foreach variables' initial values should not be ignored</value>
  </data>
  <data name="S1226_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S1227_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1227_Description" xml:space="preserve">
    <value>break; is an unstructured control flow statement which makes code harder to read.</value>
  </data>
  <data name="S1227_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1227_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1227_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1227_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1227_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1227_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1227_Title" xml:space="preserve">
    <value>break statements should not be used except for switch cases</value>
  </data>
  <data name="S1227_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1244_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S1244_Description" xml:space="preserve">
    <value>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is not associative; push a float or a double through a series of simple mathematical operations and the answer will be different based on the order of those operation because of the rounding that takes place at each step.</value>
  </data>
  <data name="S1244_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1244_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1244_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1244_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1244_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1244_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1244_Title" xml:space="preserve">
    <value>Floating point numbers should not be tested for equality</value>
  </data>
  <data name="S1244_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S125_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S125_Description" xml:space="preserve">
    <value>Programmers should not comment out code as it bloats programs and reduces readability.</value>
  </data>
  <data name="S125_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S125_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S125_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S125_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S125_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S125_Tags" xml:space="preserve">
    <value>unused</value>
  </data>
  <data name="S125_Title" xml:space="preserve">
    <value>Sections of code should not be commented out</value>
  </data>
  <data name="S125_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S126_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S126_Description" xml:space="preserve">
    <value>This rule applies whenever an if statement is followed by one or more else if statements; the final else if should be followed by an else statement.</value>
  </data>
  <data name="S126_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S126_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S126_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S126_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S126_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S126_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S126_Title" xml:space="preserve">
    <value>"if ... else if" constructs should end with "else" clauses</value>
  </data>
  <data name="S126_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1264_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1264_Description" xml:space="preserve">
    <value>When only the condition expression is defined in a for loop, and the initialization and increment expressions are missing, a while loop should be used instead to increase readability. </value>
  </data>
  <data name="S1264_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1264_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1264_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1264_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1264_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1264_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S1264_Title" xml:space="preserve">
    <value>A "while" loop should be used instead of a "for" loop</value>
  </data>
  <data name="S1264_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S127_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S127_Description" xml:space="preserve">
    <value>A for loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </value>
  </data>
  <data name="S127_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S127_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S127_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S127_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S127_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S127_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S127_Title" xml:space="preserve">
    <value>"for" loop stop conditions should be invariant</value>
  </data>
  <data name="S127_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1301_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1301_Description" xml:space="preserve">
    <value>switch statements are useful when there are many different cases depending on the value of the same expression.</value>
  </data>
  <data name="S1301_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1301_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1301_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1301_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1301_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1301_Tags" xml:space="preserve">
    <value>bad-practice</value>
  </data>
  <data name="S1301_Title" xml:space="preserve">
    <value>"switch" statements should have at least 3 "case" clauses</value>
  </data>
  <data name="S1301_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1309_Category" xml:space="preserve">
    <value>Info Code Smell</value>
  </data>
  <data name="S1309_Description" xml:space="preserve">
    <value>This rule allows you to track the usage of the SuppressMessage attributes and #pragma warning disable mechanism.</value>
  </data>
  <data name="S1309_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1309_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1309_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1309_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1309_Severity" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="S1309_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1309_Title" xml:space="preserve">
    <value>Track uses of in-source issue suppressions</value>
  </data>
  <data name="S1309_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S131_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S131_Description" xml:space="preserve">
    <value>The requirement for a final default clause is defensive programming. The clause should either take appropriate action, or contain a suitable comment as to why no action is taken. Even when the switch covers all current values of an enum, a default case should still be used because there is no guarantee that the enum won't be extended.</value>
  </data>
  <data name="S131_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S131_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S131_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S131_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S131_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S131_Tags" xml:space="preserve">
    <value>cwe</value>
  </data>
  <data name="S131_Title" xml:space="preserve">
    <value>"switch/Select" statements should contain a "default/Case Else" clauses</value>
  </data>
  <data name="S131_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1313_Category" xml:space="preserve">
    <value>Major Security Hotspot</value>
  </data>
  <data name="S1313_Description" xml:space="preserve">
    <value>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S1313_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1313_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1313_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S1313_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1313_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1313_Tags" xml:space="preserve">
    <value>owasp-a3</value>
  </data>
  <data name="S1313_Title" xml:space="preserve">
    <value>Using hardcoded IP addresses is security-sensitive</value>
  </data>
  <data name="S1313_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S134_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S134_Description" xml:space="preserve">
    <value>Nested if, switch, for, foreach, while, do, and try statements are key ingredients for making what's known as "Spaghetti code".</value>
  </data>
  <data name="S134_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S134_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S134_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S134_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S134_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S134_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S134_Title" xml:space="preserve">
    <value>Control flow statements "if", "switch", "for", "foreach", "while", "do"  and "try" should not be nested too deeply</value>
  </data>
  <data name="S134_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S138_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S138_Description" xml:space="preserve">
    <value>A function that grows too large tends to aggregate too many responsibilities.</value>
  </data>
  <data name="S138_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S138_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S138_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S138_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S138_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S138_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S138_Title" xml:space="preserve">
    <value>Functions should not have too many lines of code</value>
  </data>
  <data name="S138_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1449_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1449_Description" xml:space="preserve">
    <value>string.ToLower(), ToUpper, IndexOf, LastIndexOf, and Compare are all culture-dependent, as are some (floating point number and DateTime-related) calls to ToString. Fortunately, all have variants which accept an argument specifying the culture or formatter to use. Leave that argument off and the call will use the system default culture, possibly creating problems with international characters.</value>
  </data>
  <data name="S1449_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1449_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1449_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1449_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1449_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1449_Tags" xml:space="preserve">
    <value>unpredictable</value>
  </data>
  <data name="S1449_Title" xml:space="preserve">
    <value>Culture should be specified for "string" operations</value>
  </data>
  <data name="S1449_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1450_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1450_Description" xml:space="preserve">
    <value>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class information. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</value>
  </data>
  <data name="S1450_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1450_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1450_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1450_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1450_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1450_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S1450_Title" xml:space="preserve">
    <value>Private fields only used as local variables in methods should become local variables</value>
  </data>
  <data name="S1450_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1451_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S1451_Description" xml:space="preserve">
    <value>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </value>
  </data>
  <data name="S1451_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1451_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1451_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1451_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1451_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S1451_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1451_Title" xml:space="preserve">
    <value>Track lack of copyright and license headers</value>
  </data>
  <data name="S1451_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1479_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1479_Description" xml:space="preserve">
    <value>When switch statements have large sets of case clauses, it is usually an attempt to map two sets of data. A real map structure would be more readable and maintainable, and should be used instead.</value>
  </data>
  <data name="S1479_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1479_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1479_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S1479_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1479_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1479_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S1479_Title" xml:space="preserve">
    <value>"switch" statements should not have too many "case" clauses</value>
  </data>
  <data name="S1479_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1481_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1481_Description" xml:space="preserve">
    <value>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.</value>
  </data>
  <data name="S1481_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1481_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1481_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1481_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1481_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1481_Tags" xml:space="preserve">
    <value>unused</value>
  </data>
  <data name="S1481_Title" xml:space="preserve">
    <value>Unused local variables should be removed</value>
  </data>
  <data name="S1481_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1541_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S1541_Description" xml:space="preserve">
    <value>The cyclomatic complexity of methods and properties should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</value>
  </data>
  <data name="S1541_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1541_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1541_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1541_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1541_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S1541_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S1541_Title" xml:space="preserve">
    <value>Methods and properties should not be too complex</value>
  </data>
  <data name="S1541_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1607_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1607_Description" xml:space="preserve">
    <value>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why the test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up polluting their projects.</value>
  </data>
  <data name="S1607_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1607_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1607_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1607_Scope" xml:space="preserve">
    <value>Tests</value>
  </data>
  <data name="S1607_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1607_Tags" xml:space="preserve">
    <value>tests,suspicious</value>
  </data>
  <data name="S1607_Title" xml:space="preserve">
    <value>Tests should not be ignored</value>
  </data>
  <data name="S1607_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1643_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1643_Description" xml:space="preserve">
    <value>StringBuilder is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.</value>
  </data>
  <data name="S1643_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1643_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1643_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1643_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1643_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1643_Tags" xml:space="preserve">
    <value>performance</value>
  </data>
  <data name="S1643_Title" xml:space="preserve">
    <value>Strings should not be concatenated using '+' in a loop</value>
  </data>
  <data name="S1643_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1656_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S1656_Description" xml:space="preserve">
    <value>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.</value>
  </data>
  <data name="S1656_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1656_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1656_RemediationCost" xml:space="preserve">
    <value>3min</value>
  </data>
  <data name="S1656_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1656_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1656_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1656_Title" xml:space="preserve">
    <value>Variables should not be self-assigned</value>
  </data>
  <data name="S1656_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S1659_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1659_Description" xml:space="preserve">
    <value>Declaring multiple variable on one line is difficult to read.</value>
  </data>
  <data name="S1659_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1659_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1659_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S1659_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1659_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1659_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S1659_Title" xml:space="preserve">
    <value>Multiple variables should not be declared on the same line</value>
  </data>
  <data name="S1659_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1694_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1694_Description" xml:space="preserve">
    <value>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</value>
  </data>
  <data name="S1694_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1694_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1694_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1694_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1694_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1694_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S1694_Title" xml:space="preserve">
    <value>An abstract class should have both abstract and concrete methods</value>
  </data>
  <data name="S1694_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1696_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1696_Description" xml:space="preserve">
    <value>NullReferenceException should be avoided, not caught. Any situation in which NullReferenceException is explicitly caught can easily be converted to a null test, and any behavior being carried out in the catch block can easily be moved to the "is null" branch of the conditional.</value>
  </data>
  <data name="S1696_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1696_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1696_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1696_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1696_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1696_Tags" xml:space="preserve">
    <value>cwe,error-handling</value>
  </data>
  <data name="S1696_Title" xml:space="preserve">
    <value>NullReferenceException should not be caught</value>
  </data>
  <data name="S1696_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1697_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S1697_Description" xml:space="preserve">
    <value>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced only if it is null, leading to a guaranteed null pointer dereference.</value>
  </data>
  <data name="S1697_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1697_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1697_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S1697_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1697_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1697_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1697_Title" xml:space="preserve">
    <value>Short-circuit logic should be used to prevent null pointer dereferences in conditionals</value>
  </data>
  <data name="S1697_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S1698_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1698_Description" xml:space="preserve">
    <value>Using the equality == and inequality != operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then == resolves to reference equality, which may result in unexpected behavior if implementing classes override Equals. Similarly, when a class overrides Equals, but instances are compared with non-overloaded ==, there is a high chance that value comparison was meant instead of the reference one.</value>
  </data>
  <data name="S1698_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1698_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1698_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S1698_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1698_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1698_Tags" xml:space="preserve">
    <value>cwe,suspicious</value>
  </data>
  <data name="S1698_Title" xml:space="preserve">
    <value>"==" should not be used when "Equals" is overridden</value>
  </data>
  <data name="S1698_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1699_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S1699_Description" xml:space="preserve">
    <value>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the method.</value>
  </data>
  <data name="S1699_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1699_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1699_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1699_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1699_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S1699_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S1699_Title" xml:space="preserve">
    <value>Constructors should only call non-overridable methods</value>
  </data>
  <data name="S1699_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1751_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S1751_Description" xml:space="preserve">
    <value>A loop with at most one iteration is equivalent to the use of an if statement to conditionally execute one piece of code. If the initial intention of the author was really to conditionally execute one piece of code, an if statement should be used instead. If that was not the initial intention of the author, the body of the loop should be fixed to use the nested return, break or throw statements in a more appropriate way.</value>
  </data>
  <data name="S1751_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1751_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1751_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1751_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1751_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1751_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1751_Title" xml:space="preserve">
    <value>Loops with at most one iteration should be refactored</value>
  </data>
  <data name="S1751_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S1764_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S1764_Description" xml:space="preserve">
    <value>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</value>
  </data>
  <data name="S1764_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1764_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1764_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S1764_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1764_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1764_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1764_Title" xml:space="preserve">
    <value>Identical expressions should not be used on both sides of a binary operator</value>
  </data>
  <data name="S1764_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S1821_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S1821_Description" xml:space="preserve">
    <value>Nested switch structures are difficult to understand because you can easily confuse the cases of an inner switch as belonging to an outer statement. Therefore nested switch statements should be avoided.</value>
  </data>
  <data name="S1821_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1821_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1821_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1821_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1821_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S1821_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S1821_Title" xml:space="preserve">
    <value>"switch" statements should not be nested</value>
  </data>
  <data name="S1821_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1848_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S1848_Description" xml:space="preserve">
    <value>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could lead to an unexpected behavior in production.</value>
  </data>
  <data name="S1848_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1848_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1848_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1848_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1848_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1848_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S1848_Title" xml:space="preserve">
    <value>Objects should not be created to be dropped immediately without being used</value>
  </data>
  <data name="S1848_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S1854_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1854_Description" xml:space="preserve">
    <value>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.</value>
  </data>
  <data name="S1854_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1854_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1854_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S1854_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1854_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1854_Tags" xml:space="preserve">
    <value>cwe,unused</value>
  </data>
  <data name="S1854_Title" xml:space="preserve">
    <value>Dead stores should be removed</value>
  </data>
  <data name="S1854_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1858_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1858_Description" xml:space="preserve">
    <value>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. Similarly, explicitly invoking ToString() when the compiler would do it implicitly is also needless code-bloat.</value>
  </data>
  <data name="S1858_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1858_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1858_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S1858_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1858_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1858_Tags" xml:space="preserve">
    <value>finding,clumsy</value>
  </data>
  <data name="S1858_Title" xml:space="preserve">
    <value>"ToString()" calls should not be redundant</value>
  </data>
  <data name="S1858_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1862_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S1862_Description" xml:space="preserve">
    <value>A chain of if/else if statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to true. </value>
  </data>
  <data name="S1862_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1862_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1862_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1862_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1862_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1862_Tags" xml:space="preserve">
    <value>unused,pitfall</value>
  </data>
  <data name="S1862_Title" xml:space="preserve">
    <value>Related "if/else if" statements should not have the same condition</value>
  </data>
  <data name="S1862_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S1871_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S1871_Description" xml:space="preserve">
    <value>Having two cases in the same switch statement or branches in the same if structure with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an if structure they should be combined, or for a switch, one should fall through to the other.</value>
  </data>
  <data name="S1871_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1871_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1871_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S1871_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S1871_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S1871_Tags" xml:space="preserve">
    <value>design,suspicious</value>
  </data>
  <data name="S1871_Title" xml:space="preserve">
    <value>Two branches in a conditional structure should not have exactly the same implementation</value>
  </data>
  <data name="S1871_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1905_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1905_Description" xml:space="preserve">
    <value>Unnecessary casting expressions make the code harder to read and understand.</value>
  </data>
  <data name="S1905_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1905_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1905_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S1905_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1905_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1905_Tags" xml:space="preserve">
    <value>redundant,clumsy</value>
  </data>
  <data name="S1905_Title" xml:space="preserve">
    <value>Redundant casts should not be used</value>
  </data>
  <data name="S1905_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1939_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1939_Description" xml:space="preserve">
    <value>An inheritance list entry is redundant if:</value>
  </data>
  <data name="S1939_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1939_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1939_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S1939_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1939_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1939_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S1939_Title" xml:space="preserve">
    <value>Inheritance list should not be redundant</value>
  </data>
  <data name="S1939_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1940_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S1940_Description" xml:space="preserve">
    <value>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</value>
  </data>
  <data name="S1940_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1940_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1940_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S1940_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1940_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S1940_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S1940_Title" xml:space="preserve">
    <value>Boolean checks should not be inverted</value>
  </data>
  <data name="S1940_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1944_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S1944_Description" xml:space="preserve">
    <value>Inappropriate casts are issues that will lead to unexpected behavior or runtime errors, such as InvalidCastExceptions. The compiler will catch bad casts from one class to another, but not bad casts to interfaces. Nor will it catch nullable values that are known to be null but that are cast to their underlying value types anyway.</value>
  </data>
  <data name="S1944_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S1944_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1944_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S1944_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1944_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S1944_Tags" xml:space="preserve">
    <value>cwe,suspicious</value>
  </data>
  <data name="S1944_Title" xml:space="preserve">
    <value>Inappropriate casts should not be made</value>
  </data>
  <data name="S1944_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S1994_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S1994_Description" xml:space="preserve">
    <value>It can be extremely confusing when a for loop's counter is incremented outside of its increment clause. In such cases, the increment should be moved to the loop's increment clause if at all possible.</value>
  </data>
  <data name="S1994_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S1994_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S1994_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S1994_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S1994_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S1994_Tags" xml:space="preserve">
    <value>confusing</value>
  </data>
  <data name="S1994_Title" xml:space="preserve">
    <value>"for" loop increment clauses should modify the loops' counters</value>
  </data>
  <data name="S1994_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2068_Category" xml:space="preserve">
    <value>Blocker Vulnerability</value>
  </data>
  <data name="S2068_Description" xml:space="preserve">
    <value>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to end up in the hands of an attacker. This is particularly true for applications that are distributed.</value>
  </data>
  <data name="S2068_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2068_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2068_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S2068_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2068_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S2068_Tags" xml:space="preserve">
    <value>cwe,sans-top25-porous,owasp-a2</value>
  </data>
  <data name="S2068_Title" xml:space="preserve">
    <value>Credentials should not be hard-coded</value>
  </data>
  <data name="S2068_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S2070_Category" xml:space="preserve">
    <value>Critical Vulnerability</value>
  </data>
  <data name="S2070_Description" xml:space="preserve">
    <value>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is, it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2, MD4, MD6.</value>
  </data>
  <data name="S2070_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2070_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2070_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S2070_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2070_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2070_Tags" xml:space="preserve">
    <value>cwe,spring,owasp-a6,sans-top25-porous</value>
  </data>
  <data name="S2070_Title" xml:space="preserve">
    <value>SHA-1 and Message-Digest hash algorithms should not be used in secure contexts</value>
  </data>
  <data name="S2070_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S2077_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S2077_Description" xml:space="preserve">
    <value>Formatting strings used as SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S2077_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2077_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2077_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2077_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2077_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2077_Tags" xml:space="preserve">
    <value>cwe,owasp-a1,sans-top25-insecure,bad-practice,sql</value>
  </data>
  <data name="S2077_Title" xml:space="preserve">
    <value>Formatting SQL queries is security-sensitive</value>
  </data>
  <data name="S2077_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S2092_Category" xml:space="preserve">
    <value>Minor Security Hotspot</value>
  </data>
  <data name="S2092_Description" xml:space="preserve">
    <value>The "secure" attribute prevents cookies from being sent over plaintext connections such as HTTP, where they would be easily eavesdropped upon. Instead, cookies with the secure attribute are only sent over encrypted HTTPS connections.</value>
  </data>
  <data name="S2092_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2092_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2092_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2092_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2092_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2092_Tags" xml:space="preserve">
    <value>cwe,sans-top25-porous,owasp-a2,owasp-a3</value>
  </data>
  <data name="S2092_Title" xml:space="preserve">
    <value>Creating cookies without the "secure" flag is security-sensitive</value>
  </data>
  <data name="S2092_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S2114_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S2114_Description" xml:space="preserve">
    <value>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical code. </value>
  </data>
  <data name="S2114_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2114_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2114_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S2114_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2114_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2114_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2114_Title" xml:space="preserve">
    <value>Collections should not be passed as arguments to their own methods</value>
  </data>
  <data name="S2114_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2123_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S2123_Description" xml:space="preserve">
    <value>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</value>
  </data>
  <data name="S2123_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2123_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2123_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2123_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2123_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2123_Tags" xml:space="preserve">
    <value>unused</value>
  </data>
  <data name="S2123_Title" xml:space="preserve">
    <value>Values should not be uselessly incremented</value>
  </data>
  <data name="S2123_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2148_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2148_Description" xml:space="preserve">
    <value>Beginning with C# 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this manner has no semantic meaning, but makes it easier for maintainers to understand the code.</value>
  </data>
  <data name="S2148_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2148_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2148_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2148_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2148_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2148_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2148_Title" xml:space="preserve">
    <value>Underscores should be used to make large numbers readable</value>
  </data>
  <data name="S2148_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2156_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2156_Description" xml:space="preserve">
    <value>The difference between private and protected visibility is that child classes can see and use protected members, but they cannot see private ones. Since a sealed class cannot have children, marking its members protected is confusingly pointless.</value>
  </data>
  <data name="S2156_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2156_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2156_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2156_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2156_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2156_Tags" xml:space="preserve">
    <value>confusing</value>
  </data>
  <data name="S2156_Title" xml:space="preserve">
    <value>"sealed" classes should not have "protected" members</value>
  </data>
  <data name="S2156_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2178_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S2178_Description" xml:space="preserve">
    <value>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are evaluated under the wrong circumstances. </value>
  </data>
  <data name="S2178_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2178_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2178_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2178_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2178_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S2178_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2178_Title" xml:space="preserve">
    <value>Short-circuit logic should be used in boolean contexts</value>
  </data>
  <data name="S2178_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2183_Category" xml:space="preserve">
    <value>Minor Bug</value>
  </data>
  <data name="S2183_Description" xml:space="preserve">
    <value>Shifting an integral number by 0 is equivalent to doing nothing but makes the code confusing for maintainers.</value>
  </data>
  <data name="S2183_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2183_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2183_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2183_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2183_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2183_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2183_Title" xml:space="preserve">
    <value>Integral numbers should not be shifted by zero or more than their number of bits-1</value>
  </data>
  <data name="S2183_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2184_Category" xml:space="preserve">
    <value>Minor Bug</value>
  </data>
  <data name="S2184_Description" xml:space="preserve">
    <value>When division is performed on ints, the result will always be an int. You can assign that result to a double, float or decimal with automatic type conversion, but having started as an int, the result will likely not be what you expect. If the result of int division is assigned to a floating-point variable, precision will have been lost before the assignment. Instead, at least one operand should be cast or promoted to the final type before the operation takes place.</value>
  </data>
  <data name="S2184_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2184_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2184_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S2184_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2184_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2184_Tags" xml:space="preserve">
    <value>cwe,overflow,sans-top25-risky</value>
  </data>
  <data name="S2184_Title" xml:space="preserve">
    <value>Results of integer division should not be assigned to floating point variables</value>
  </data>
  <data name="S2184_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2187_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S2187_Description" xml:space="preserve">
    <value>There's no point in having a test class without any test methods.This could lead a maintainer to assume a class is covered by tests even though it is not.</value>
  </data>
  <data name="S2187_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2187_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2187_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2187_Scope" xml:space="preserve">
    <value>Tests</value>
  </data>
  <data name="S2187_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S2187_Tags" xml:space="preserve">
    <value>tests,unused,confusing</value>
  </data>
  <data name="S2187_Title" xml:space="preserve">
    <value>TestCases should contain tests</value>
  </data>
  <data name="S2187_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2190_Category" xml:space="preserve">
    <value>Blocker Bug</value>
  </data>
  <data name="S2190_Description" xml:space="preserve">
    <value>Recursion happens when control enters a loop that has no exit. This can happen a method invokes itself, when a pair of methods invoke each other, or when goto statements are used to move between two segments of code. It can be a useful tool, but unless the method includes a provision to break out of the recursion and return, the recursion will continue until the stack overflows and the program crashes.</value>
  </data>
  <data name="S2190_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2190_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2190_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S2190_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2190_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S2190_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S2190_Title" xml:space="preserve">
    <value>Recursion should not be infinite</value>
  </data>
  <data name="S2190_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2197_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2197_Description" xml:space="preserve">
    <value>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for equality with a positive number (or a negative one) could result in unexpected results. </value>
  </data>
  <data name="S2197_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2197_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2197_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2197_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2197_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2197_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S2197_Title" xml:space="preserve">
    <value>Modulus results should not be checked for direct equality</value>
  </data>
  <data name="S2197_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2201_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S2201_Description" xml:space="preserve">
    <value>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either the function call is useless and should be dropped or the source code doesn't behave as expected.</value>
  </data>
  <data name="S2201_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2201_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2201_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S2201_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2201_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2201_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2201_Title" xml:space="preserve">
    <value>Return values from functions without side effects should not be ignored</value>
  </data>
  <data name="S2201_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2219_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2219_Description" xml:space="preserve">
    <value>To check the type of an object there are several options:</value>
  </data>
  <data name="S2219_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2219_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2219_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2219_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2219_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2219_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S2219_Title" xml:space="preserve">
    <value>Runtime type checking should be simplified</value>
  </data>
  <data name="S2219_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2221_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2221_Description" xml:space="preserve">
    <value>Catching System.Exception seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types, including the ones that were not intended to be caught. To prevent any misunderstandings, the exception filters should be used. Alternatively each exception type should be in a separate catch block.</value>
  </data>
  <data name="S2221_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2221_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2221_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S2221_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2221_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2221_Tags" xml:space="preserve">
    <value>cwe,error-handling</value>
  </data>
  <data name="S2221_Title" xml:space="preserve">
    <value>"Exception" should not be caught when not required by called methods</value>
  </data>
  <data name="S2221_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2223_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2223_Description" xml:space="preserve">
    <value>A static field that is neither constant nor read-only is not thread-safe. Correctly accessing these fields from different threads needs synchronization with locks. Improper synchronization may lead to unexpected results, thus publicly visible static fields are best suited for storing non-changing data shared by many consumers. To enforce this intent, these fields should be marked readonly or converted to constants.</value>
  </data>
  <data name="S2223_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2223_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2223_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2223_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2223_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2223_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2223_Title" xml:space="preserve">
    <value>Non-constant static fields should not be visible</value>
  </data>
  <data name="S2223_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2225_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S2225_Description" xml:space="preserve">
    <value>Calling ToString() on an object should always return a string. Returning null instead contravenes the method's implicit contract.</value>
  </data>
  <data name="S2225_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2225_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2225_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2225_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2225_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2225_Tags" xml:space="preserve">
    <value>cwe</value>
  </data>
  <data name="S2225_Title" xml:space="preserve">
    <value>"ToString()" method should not return null</value>
  </data>
  <data name="S2225_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2228_Category" xml:space="preserve">
    <value>Minor Vulnerability</value>
  </data>
  <data name="S2228_Description" xml:space="preserve">
    <value>Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you run the risk of inadvertently exposing sensitive information.</value>
  </data>
  <data name="S2228_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2228_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2228_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2228_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2228_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2228_Tags" xml:space="preserve">
    <value>owasp-a3</value>
  </data>
  <data name="S2228_Title" xml:space="preserve">
    <value>Console logging should not be used</value>
  </data>
  <data name="S2228_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S2234_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2234_Description" xml:space="preserve">
    <value>When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when the names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead to unexpected results.</value>
  </data>
  <data name="S2234_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2234_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2234_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2234_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2234_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2234_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2234_Title" xml:space="preserve">
    <value>Parameters should be passed in the correct order</value>
  </data>
  <data name="S2234_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2245_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S2245_Description" xml:space="preserve">
    <value>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S2245_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2245_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2245_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S2245_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2245_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2245_Tags" xml:space="preserve">
    <value>cwe,owasp-a3</value>
  </data>
  <data name="S2245_Title" xml:space="preserve">
    <value>Using pseudorandom number generators (PRNGs) is security-sensitive</value>
  </data>
  <data name="S2245_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S2255_Category" xml:space="preserve">
    <value>Minor Security Hotspot</value>
  </data>
  <data name="S2255_Description" xml:space="preserve">
    <value>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S2255_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2255_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2255_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2255_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2255_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2255_Tags" xml:space="preserve">
    <value>cwe,sans-top25-porous,owasp-a3</value>
  </data>
  <data name="S2255_Title" xml:space="preserve">
    <value>Writing cookies is security-sensitive</value>
  </data>
  <data name="S2255_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S2259_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S2259_Description" xml:space="preserve">
    <value>A reference to null should never be dereferenced/accessed. Doing so will cause a NullReferenceException to be thrown. At best, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or it could allow an attacker to bypass security measures.</value>
  </data>
  <data name="S2259_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2259_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2259_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S2259_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2259_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2259_Tags" xml:space="preserve">
    <value>cwe</value>
  </data>
  <data name="S2259_Title" xml:space="preserve">
    <value>Null pointers should not be dereferenced</value>
  </data>
  <data name="S2259_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2275_Category" xml:space="preserve">
    <value>Blocker Bug</value>
  </data>
  <data name="S2275_Description" xml:space="preserve">
    <value>Because composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected behaviors or runtime errors. This rule statically validates the good behavior of composite formats when calling the methods of String.Format, StringBuilder.AppendFormat, Console.Write, Console.WriteLine, TextWriter.Write, TextWriter.WriteLine, Debug.WriteLine(String, Object[]), Trace.TraceError(String, Object[]), Trace.TraceInformation(String, Object[]), Trace.TraceWarning(String, Object[]) and TraceSource.TraceInformation(String, Object[]). </value>
  </data>
  <data name="S2275_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2275_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2275_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S2275_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2275_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S2275_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2275_Title" xml:space="preserve">
    <value>Composite format strings should not lead to unexpected behavior at runtime</value>
  </data>
  <data name="S2275_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2278_Category" xml:space="preserve">
    <value>Blocker Vulnerability</value>
  </data>
  <data name="S2278_Description" xml:space="preserve">
    <value>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</value>
  </data>
  <data name="S2278_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2278_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2278_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2278_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2278_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S2278_Tags" xml:space="preserve">
    <value>cwe,owasp-a6,sans-top25-porous</value>
  </data>
  <data name="S2278_Title" xml:space="preserve">
    <value>Neither DES (Data Encryption Standard) nor DESede (3DES) should be used</value>
  </data>
  <data name="S2278_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S2290_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2290_Description" xml:space="preserve">
    <value>Field-like events are events that do not have explicit add and remove methods. The compiler generates a private delegate field to back the event, as well as generating the implicit add and remove methods.</value>
  </data>
  <data name="S2290_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2290_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2290_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2290_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2290_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2290_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2290_Title" xml:space="preserve">
    <value>Field-like events should not be virtual</value>
  </data>
  <data name="S2290_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2291_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2291_Description" xml:space="preserve">
    <value>Enumerable.Sum() always executes addition in a checked context, so an OverflowException will be thrown if the value exceeds MaxValue even if an unchecked context was specified. Using an unchecked context anyway represents a misunderstanding of how Sum works.</value>
  </data>
  <data name="S2291_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2291_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2291_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S2291_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2291_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2291_Tags" xml:space="preserve">
    <value>error-handling</value>
  </data>
  <data name="S2291_Title" xml:space="preserve">
    <value>Overflow checking should not be disabled for "Enumerable.Sum"</value>
  </data>
  <data name="S2291_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2292_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2292_Description" xml:space="preserve">
    <value>Trivial properties, which include no logic but setting and getting a backing field should be converted to auto-implemented properties, yielding cleaner and more readable code.</value>
  </data>
  <data name="S2292_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2292_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2292_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2292_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2292_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2292_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S2292_Title" xml:space="preserve">
    <value>Trivial properties should be auto-implemented</value>
  </data>
  <data name="S2292_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2302_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2302_Description" xml:space="preserve">
    <value>Because parameter names could be changed during refactoring, they should not be spelled out literally in strings. Instead, use nameof(), and the string that's output will always be correct.</value>
  </data>
  <data name="S2302_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2302_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2302_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2302_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2302_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2302_Tags" xml:space="preserve">
    <value>c#6</value>
  </data>
  <data name="S2302_Title" xml:space="preserve">
    <value>"nameof" should be used</value>
  </data>
  <data name="S2302_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2306_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S2306_Description" xml:space="preserve">
    <value>Since C# 5.0, async and await are contextual keywords. Contextual keywords do have a particular meaning in some contexts, but can still be used as variable names. Keywords, on the other hand, are always reserved, and therefore are not valid variable names. To avoid any confusion though, it is best to not use async and await as identifiers.</value>
  </data>
  <data name="S2306_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2306_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2306_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2306_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2306_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S2306_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2306_Title" xml:space="preserve">
    <value>"async" and "await" should not be used as identifiers</value>
  </data>
  <data name="S2306_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2325_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2325_Description" xml:space="preserve">
    <value>Methods and properties that don't access instance data can be static to prevent any misunderstanding about the contract of the method. </value>
  </data>
  <data name="S2325_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2325_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2325_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2325_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2325_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2325_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2325_Title" xml:space="preserve">
    <value>Methods and properties that don't access instance data should be static</value>
  </data>
  <data name="S2325_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2326_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2326_Description" xml:space="preserve">
    <value>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type parameters should be removed.</value>
  </data>
  <data name="S2326_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2326_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2326_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2326_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2326_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2326_Tags" xml:space="preserve">
    <value>unused</value>
  </data>
  <data name="S2326_Title" xml:space="preserve">
    <value>Unused type parameters should be removed</value>
  </data>
  <data name="S2326_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2327_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2327_Description" xml:space="preserve">
    <value>When multiple, adjacent try statements have duplicate catch and/or finally blocks, they should be merged to consolidate the catch/finally logic for cleaner, more readable code. Note that this applies even when there is intervening code outside any try block.</value>
  </data>
  <data name="S2327_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2327_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2327_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2327_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2327_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2327_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S2327_Title" xml:space="preserve">
    <value>"try" statements with identical "catch" and/or "finally" blocks should be merged</value>
  </data>
  <data name="S2327_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2328_Category" xml:space="preserve">
    <value>Minor Bug</value>
  </data>
  <data name="S2328_Description" xml:space="preserve">
    <value>GetHashCode is used to file an object in a Dictionary or Hashtable. If GetHashCode uses non-readonly fields and those fields change after the object is stored, the object immediately becomes mis-filed in the Hashtable. Any subsequent test to see if the object is in the Hashtable will return a false negative.</value>
  </data>
  <data name="S2328_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2328_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2328_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S2328_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2328_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2328_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2328_Title" xml:space="preserve">
    <value>"GetHashCode" should not reference mutable fields</value>
  </data>
  <data name="S2328_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2330_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2330_Description" xml:space="preserve">
    <value>Array covariance is the principle that if an implicit or explicit reference conversion exits from type A to B, then the same conversion exists from the array type A[] to B[].</value>
  </data>
  <data name="S2330_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2330_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2330_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S2330_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2330_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2330_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2330_Title" xml:space="preserve">
    <value>Array covariance should not be used</value>
  </data>
  <data name="S2330_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2333_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2333_Description" xml:space="preserve">
    <value>Unnecessary keywords simply clutter the code and should be removed. Specifically:</value>
  </data>
  <data name="S2333_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2333_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2333_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S2333_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2333_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2333_Tags" xml:space="preserve">
    <value>unused,finding,clumsy</value>
  </data>
  <data name="S2333_Title" xml:space="preserve">
    <value>Redundant modifiers should not be used</value>
  </data>
  <data name="S2333_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2339_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2339_Description" xml:space="preserve">
    <value>Constant members are copied at compile time to the call sites, instead of being fetched at runtime.</value>
  </data>
  <data name="S2339_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2339_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2339_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2339_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2339_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2339_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2339_Title" xml:space="preserve">
    <value>Public constant members should not be used</value>
  </data>
  <data name="S2339_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2342_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2342_Description" xml:space="preserve">
    <value>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all enum names match a provided regular expression.</value>
  </data>
  <data name="S2342_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2342_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2342_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2342_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2342_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2342_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2342_Title" xml:space="preserve">
    <value>Enumeration types should comply with a naming convention</value>
  </data>
  <data name="S2342_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2344_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2344_Description" xml:space="preserve">
    <value>The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.</value>
  </data>
  <data name="S2344_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2344_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2344_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2344_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2344_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2344_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2344_Title" xml:space="preserve">
    <value>Enumeration type names should not have "Flags" or "Enum" suffixes</value>
  </data>
  <data name="S2344_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2345_Category" xml:space="preserve">
    <value>Minor Bug</value>
  </data>
  <data name="S2345_Description" xml:space="preserve">
    <value>Flags enumerations should not rely on the language to initialize the values of their members. Implicit initialization will set the first member to 0, and increment the value by one for each subsequent member. This implicit behavior does not allow members to be combined using the bitwise or operator in a useful way.</value>
  </data>
  <data name="S2345_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2345_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2345_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2345_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2345_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2345_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2345_Title" xml:space="preserve">
    <value>Flags enumerations should explicitly initialize all their members</value>
  </data>
  <data name="S2345_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2346_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2346_Description" xml:space="preserve">
    <value>Consistent use of "None" in flags enumerations indicates that all flag values are cleared. The value 0 should not be used to indicate any other state, since there is no way to check that the bit 0 is set.</value>
  </data>
  <data name="S2346_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2346_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2346_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2346_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2346_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2346_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S2346_Title" xml:space="preserve">
    <value>Flags enumerations zero-value members should be named "None"</value>
  </data>
  <data name="S2346_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2357_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2357_Description" xml:space="preserve">
    <value>Fields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and validation cannot be added later on without breaking backward compatibility. Instead, developers should encapsulate their fields into properties. Explicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.</value>
  </data>
  <data name="S2357_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2357_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2357_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S2357_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2357_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2357_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2357_Title" xml:space="preserve">
    <value>Fields should be private</value>
  </data>
  <data name="S2357_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2360_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2360_Description" xml:space="preserve">
    <value>The overloading mechanism should be used in place of optional parameters for several reasons:</value>
  </data>
  <data name="S2360_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2360_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2360_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2360_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2360_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2360_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2360_Title" xml:space="preserve">
    <value>Optional parameters should not be used</value>
  </data>
  <data name="S2360_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2365_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2365_Description" xml:space="preserve">
    <value>Most developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will be much slower than simple field access, contrary to the caller's likely expectations. Therefore, such properties should be refactored into methods so that callers are not surprised by the unexpectedly poor performance.</value>
  </data>
  <data name="S2365_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2365_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2365_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2365_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2365_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2365_Tags" xml:space="preserve">
    <value>api-design,performance</value>
  </data>
  <data name="S2365_Title" xml:space="preserve">
    <value>Properties should not make collection or array copies</value>
  </data>
  <data name="S2365_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2368_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S2368_Description" xml:space="preserve">
    <value>Exposing methods with multidimensional array parameters requires developers to have advanced knowledge about the language in order to be able to use them. Moreover, what exactly to pass to such parameters is not intuitive. Therefore, such methods should not be exposed, but can be used internally.</value>
  </data>
  <data name="S2368_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2368_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2368_RemediationCost" xml:space="preserve">
    <value>1h</value>
  </data>
  <data name="S2368_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2368_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S2368_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2368_Title" xml:space="preserve">
    <value>Public methods should not have multidimensional array parameters</value>
  </data>
  <data name="S2368_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2372_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2372_Description" xml:space="preserve">
    <value>Property getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a method. </value>
  </data>
  <data name="S2372_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2372_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2372_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2372_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2372_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2372_Tags" xml:space="preserve">
    <value>error-handling</value>
  </data>
  <data name="S2372_Title" xml:space="preserve">
    <value>Exceptions should not be thrown from property getters</value>
  </data>
  <data name="S2372_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2376_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2376_Description" xml:space="preserve">
    <value>Properties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be replaced with a setter method.</value>
  </data>
  <data name="S2376_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2376_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2376_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2376_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2376_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2376_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2376_Title" xml:space="preserve">
    <value>Write-only properties should not be used</value>
  </data>
  <data name="S2376_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2386_Category" xml:space="preserve">
    <value>Minor Vulnerability</value>
  </data>
  <data name="S2386_Description" xml:space="preserve">
    <value>public static mutable fields of classes which are accessed directly should be protected to the degree possible. This can be done by reducing the accessibility of the field or by changing the return type to an immutable type.</value>
  </data>
  <data name="S2386_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2386_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2386_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S2386_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2386_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2386_Tags" xml:space="preserve">
    <value>cwe,unpredictable</value>
  </data>
  <data name="S2386_Title" xml:space="preserve">
    <value>Mutable fields should not be "public static"</value>
  </data>
  <data name="S2386_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S2387_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S2387_Description" xml:space="preserve">
    <value>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at best, chaos at worst. </value>
  </data>
  <data name="S2387_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2387_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2387_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2387_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2387_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S2387_Tags" xml:space="preserve">
    <value>confusing</value>
  </data>
  <data name="S2387_Title" xml:space="preserve">
    <value>Child class fields should not shadow parent class fields</value>
  </data>
  <data name="S2387_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2436_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2436_Description" xml:space="preserve">
    <value>A method or class with too many type parameters has likely aggregated too many responsibilities and should be split.</value>
  </data>
  <data name="S2436_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2436_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2436_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2436_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2436_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2436_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S2436_Title" xml:space="preserve">
    <value>Types and methods should not have too many generic parameters</value>
  </data>
  <data name="S2436_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2437_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S2437_Description" xml:space="preserve">
    <value>Certain bit operations are just silly and should not be performed because their results are predictable.</value>
  </data>
  <data name="S2437_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2437_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2437_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2437_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2437_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S2437_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S2437_Title" xml:space="preserve">
    <value>Silly bit operations should not be performed</value>
  </data>
  <data name="S2437_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2486_Category" xml:space="preserve">
    <value>Critical Vulnerability</value>
  </data>
  <data name="S2486_Description" xml:space="preserve">
    <value>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</value>
  </data>
  <data name="S2486_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2486_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2486_RemediationCost" xml:space="preserve">
    <value>1h</value>
  </data>
  <data name="S2486_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2486_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2486_Tags" xml:space="preserve">
    <value>cwe,error-handling,owasp-a10,suspicious</value>
  </data>
  <data name="S2486_Title" xml:space="preserve">
    <value>Generic exceptions should not be ignored</value>
  </data>
  <data name="S2486_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S2551_Category" xml:space="preserve">
    <value>Critical Bug</value>
  </data>
  <data name="S2551_Description" xml:space="preserve">
    <value>Shared resources should not be used for locking as it increases the chance of deadlocks. Any other thread could acquire (or attempt to acquire) the same lock for another unrelated purpose. </value>
  </data>
  <data name="S2551_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2551_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2551_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S2551_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2551_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2551_Tags" xml:space="preserve">
    <value>multi-threading</value>
  </data>
  <data name="S2551_Title" xml:space="preserve">
    <value>Shared resources should not be used for locking</value>
  </data>
  <data name="S2551_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2583_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S2583_Description" xml:space="preserve">
    <value>Conditional expressions which are always true or false can lead to dead code. Such code is always buggy and should never be used in production.</value>
  </data>
  <data name="S2583_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2583_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2583_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S2583_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2583_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2583_Tags" xml:space="preserve">
    <value>cwe,unused,pitfall</value>
  </data>
  <data name="S2583_Title" xml:space="preserve">
    <value>Conditionally executed blocks should be reachable</value>
  </data>
  <data name="S2583_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2589_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2589_Description" xml:space="preserve">
    <value>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</value>
  </data>
  <data name="S2589_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2589_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2589_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S2589_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2589_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2589_Tags" xml:space="preserve">
    <value>cwe,redundant</value>
  </data>
  <data name="S2589_Title" xml:space="preserve">
    <value>Boolean expressions should not be gratuitous</value>
  </data>
  <data name="S2589_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2674_Category" xml:space="preserve">
    <value>Minor Bug</value>
  </data>
  <data name="S2674_Description" xml:space="preserve">
    <value>You cannot assume that any given stream reading call will fill the byte[] passed in to the method with the number of bytes requested. Instead, you must check the value returned by the read method to see how many bytes were read. Fail to do so, and you introduce a bug that is both harmful and difficult to reproduce.</value>
  </data>
  <data name="S2674_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2674_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2674_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S2674_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2674_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2674_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2674_Title" xml:space="preserve">
    <value>The length returned from a stream read should be checked</value>
  </data>
  <data name="S2674_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2681_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2681_Description" xml:space="preserve">
    <value>Curly braces can be omitted from a one-line block, such as with an if statement or for loop, but doing so can be misleading and induce bugs. </value>
  </data>
  <data name="S2681_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2681_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2681_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2681_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2681_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2681_Tags" xml:space="preserve">
    <value>cwe</value>
  </data>
  <data name="S2681_Title" xml:space="preserve">
    <value>Multiline blocks should be enclosed in curly braces</value>
  </data>
  <data name="S2681_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2688_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S2688_Description" xml:space="preserve">
    <value>NaN is not equal to anything, even itself. Testing for equality or inequality against NaN will yield predictable results, but probably not the ones you want. </value>
  </data>
  <data name="S2688_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2688_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2688_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2688_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2688_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2688_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2688_Title" xml:space="preserve">
    <value>"NaN" should not be used in comparisons</value>
  </data>
  <data name="S2688_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2692_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2692_Description" xml:space="preserve">
    <value>Most checks against an IndexOf value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the first element, which is likely a bug. If the intent is merely to check inclusion of a value in a string, List, or an array, consider using the Contains method instead.</value>
  </data>
  <data name="S2692_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2692_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2692_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S2692_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2692_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2692_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S2692_Title" xml:space="preserve">
    <value>"IndexOf" checks should not be for positive numbers</value>
  </data>
  <data name="S2692_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2696_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2696_Description" xml:space="preserve">
    <value>Correctly updating a static field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple class instances and/or multiple threads in play. </value>
  </data>
  <data name="S2696_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2696_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2696_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2696_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2696_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2696_Tags" xml:space="preserve">
    <value>multi-threading</value>
  </data>
  <data name="S2696_Title" xml:space="preserve">
    <value>Instance members should not write to "static" fields</value>
  </data>
  <data name="S2696_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2699_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S2699_Description" xml:space="preserve">
    <value>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the code under test.</value>
  </data>
  <data name="S2699_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2699_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2699_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S2699_Scope" xml:space="preserve">
    <value>Tests</value>
  </data>
  <data name="S2699_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S2699_Tags" xml:space="preserve">
    <value>tests</value>
  </data>
  <data name="S2699_Title" xml:space="preserve">
    <value>Tests should include assertions</value>
  </data>
  <data name="S2699_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2701_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S2701_Description" xml:space="preserve">
    <value>There's no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.</value>
  </data>
  <data name="S2701_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2701_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2701_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2701_Scope" xml:space="preserve">
    <value>Tests</value>
  </data>
  <data name="S2701_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2701_Tags" xml:space="preserve">
    <value>tests</value>
  </data>
  <data name="S2701_Title" xml:space="preserve">
    <value>Literal boolean values should not be used in assertions</value>
  </data>
  <data name="S2701_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2737_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2737_Description" xml:space="preserve">
    <value>A catch clause that only rethrows the caught exception has the same effect as omitting the catch altogether and letting it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </value>
  </data>
  <data name="S2737_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2737_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2737_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2737_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2737_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2737_Tags" xml:space="preserve">
    <value>error-handling,unused,finding,clumsy</value>
  </data>
  <data name="S2737_Title" xml:space="preserve">
    <value>"catch" clauses should do more than rethrow</value>
  </data>
  <data name="S2737_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2743_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2743_Description" xml:space="preserve">
    <value>A static field in a generic type is not shared among instances of different closed constructed types, thus LengthLimitedSingletonCollection&lt;int&gt;.instances and LengthLimitedSingletonCollection&lt;string&gt;.instances will point to different objects, even though instances is seemingly shared among all LengthLimitedSingletonCollection&lt;&gt; generic classes.</value>
  </data>
  <data name="S2743_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2743_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2743_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S2743_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2743_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2743_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2743_Title" xml:space="preserve">
    <value>Static fields should not be used in generic types</value>
  </data>
  <data name="S2743_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2757_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S2757_Description" xml:space="preserve">
    <value>The use of operators pairs ( =+, =- or =! ) where the reversed, single operator was meant (+=, -= or !=) will compile and run, but not produce the expected results.</value>
  </data>
  <data name="S2757_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2757_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2757_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S2757_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2757_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2757_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2757_Title" xml:space="preserve">
    <value>"=+" should not be used instead of "+="</value>
  </data>
  <data name="S2757_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2758_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S2758_Description" xml:space="preserve">
    <value>When the second and third operands of a ternary operator are the same, the operator will always return the same value regardless of the condition. Either the operator itself is pointless, or a mistake was made in coding it. </value>
  </data>
  <data name="S2758_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2758_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2758_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2758_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2758_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2758_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2758_Title" xml:space="preserve">
    <value>The ternary operator should not return the same value regardless of the condition</value>
  </data>
  <data name="S2758_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2760_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S2760_Description" xml:space="preserve">
    <value>When the same condition is checked twice in a row, it is either confusing - why have separate checks? - or an error - some other condition should have been checked in the second test.</value>
  </data>
  <data name="S2760_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2760_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2760_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2760_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2760_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2760_Tags" xml:space="preserve">
    <value>suspicious,clumsy</value>
  </data>
  <data name="S2760_Title" xml:space="preserve">
    <value>Sequential tests should not check the same condition</value>
  </data>
  <data name="S2760_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2761_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S2761_Description" xml:space="preserve">
    <value>Calling the ! or ~ prefix operator twice does nothing: the second invocation undoes the first. Such mistakes are typically caused by accidentally double-tapping the key in question without noticing.</value>
  </data>
  <data name="S2761_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2761_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2761_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2761_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2761_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2761_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2761_Title" xml:space="preserve">
    <value>Doubled prefix operators "!!" and "~~" should not be used</value>
  </data>
  <data name="S2761_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2930_Category" xml:space="preserve">
    <value>Blocker Bug</value>
  </data>
  <data name="S2930_Description" xml:space="preserve">
    <value>When writing managed code, you don't need to worry about allocating or freeing memory: The garbage collector takes care of it. For efficiency reasons, some objects such as Bitmap use unmanaged memory, enabling for example the use of pointer arithmetic. Such objects have potentially huge unmanaged memory footprints, but will have tiny managed ones. Unfortunately, the garbage collector only sees the tiny managed footprint, and fails to reclaim the unmanaged memory (by calling Bitmap's finalizer method) in a timely fashion. </value>
  </data>
  <data name="S2930_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2930_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2930_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S2930_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2930_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S2930_Tags" xml:space="preserve">
    <value>cwe,denial-of-service</value>
  </data>
  <data name="S2930_Title" xml:space="preserve">
    <value>"IDisposables" should be disposed</value>
  </data>
  <data name="S2930_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2931_Category" xml:space="preserve">
    <value>Blocker Bug</value>
  </data>
  <data name="S2931_Description" xml:space="preserve">
    <value>An IDisposable object should be disposed (there are some rare exceptions where not disposing is fine, most notably Task). If a class has an IDisposable field, there can be two situations:</value>
  </data>
  <data name="S2931_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2931_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2931_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S2931_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2931_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S2931_Tags" xml:space="preserve">
    <value>cwe,denial-of-service</value>
  </data>
  <data name="S2931_Title" xml:space="preserve">
    <value>Classes with "IDisposable" members should implement "IDisposable"</value>
  </data>
  <data name="S2931_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2933_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2933_Description" xml:space="preserve">
    <value>readonly fields can only be assigned in a class constructor. If a class has a field that's not marked readonly but is only set in the constructor, it could cause confusion about the field's intended use. To avoid confusion, such fields should be marked readonly to make their intended use explicit, and to prevent future maintainers from inadvertently changing their use.</value>
  </data>
  <data name="S2933_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2933_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2933_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S2933_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2933_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2933_Tags" xml:space="preserve">
    <value>confusing</value>
  </data>
  <data name="S2933_Title" xml:space="preserve">
    <value>Fields that are only assigned in the constructor should be "readonly"</value>
  </data>
  <data name="S2933_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2934_Category" xml:space="preserve">
    <value>Minor Bug</value>
  </data>
  <data name="S2934_Description" xml:space="preserve">
    <value>While the properties of a readonly reference type field can still be changed after initialization, those of a readonly value field, such as a struct, cannot. </value>
  </data>
  <data name="S2934_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2934_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2934_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2934_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2934_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2934_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2934_Title" xml:space="preserve">
    <value>Property assignments should not be made for "readonly" fields not constrained to reference types</value>
  </data>
  <data name="S2934_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2952_Category" xml:space="preserve">
    <value>Critical Bug</value>
  </data>
  <data name="S2952_Description" xml:space="preserve">
    <value>It is possible in an IDisposable to call Dispose on class members from any method, but the contract of Dispose is that it will clean up all unmanaged resources. Move disposing of members to some other method, and you risk resource leaks.</value>
  </data>
  <data name="S2952_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2952_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2952_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2952_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2952_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S2952_Tags" xml:space="preserve">
    <value>cwe,denial-of-service</value>
  </data>
  <data name="S2952_Title" xml:space="preserve">
    <value>Classes should "Dispose" of members from the classes' own "Dispose" methods</value>
  </data>
  <data name="S2952_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2953_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S2953_Description" xml:space="preserve">
    <value>Dispose as a method name should be used exclusively to implement IDisposable.Dispose to prevent any confusion.</value>
  </data>
  <data name="S2953_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2953_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2953_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S2953_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S2953_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S2953_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S2953_Title" xml:space="preserve">
    <value>Methods named "Dispose" should implement "IDisposable.Dispose"</value>
  </data>
  <data name="S2953_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2955_Category" xml:space="preserve">
    <value>Minor Bug</value>
  </data>
  <data name="S2955_Description" xml:space="preserve">
    <value>When constraints have not been applied to restrict a generic type parameter to be a reference type, then a value type, such as a struct, could also be passed. In such cases, comparing the type parameter to null would always be false, because a struct can be empty, but never null. If a value type is truly what's expected, then the comparison should use default(). If it's not, then constraints should be added so that no value type can be passed.</value>
  </data>
  <data name="S2955_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S2955_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2955_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S2955_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2955_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S2955_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2955_Title" xml:space="preserve">
    <value>Generic parameters not constrained to reference types should not be compared to "null"</value>
  </data>
  <data name="S2955_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2971_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S2971_Description" xml:space="preserve">
    <value>In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways IEnumerable language integrated queries (LINQ) can be simplified</value>
  </data>
  <data name="S2971_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2971_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2971_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2971_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2971_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2971_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S2971_Title" xml:space="preserve">
    <value>"IEnumerable" LINQs should be simplified</value>
  </data>
  <data name="S2971_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S2995_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S2995_Description" xml:space="preserve">
    <value>Using Object.ReferenceEquals to compare the references of two value types simply won't return the expected results most of the time because such types are passed by value, not by reference.</value>
  </data>
  <data name="S2995_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2995_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2995_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S2995_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2995_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2995_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2995_Title" xml:space="preserve">
    <value>"Object.ReferenceEquals" should not be used for value types</value>
  </data>
  <data name="S2995_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2996_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S2996_Description" xml:space="preserve">
    <value>When an object has a field annotated with ThreadStatic, that field is shared within a given thread, but unique across threads. Since a class' static initializer is only invoked for the first thread created, it also means that only the first thread will have the expected initial values.</value>
  </data>
  <data name="S2996_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2996_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2996_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S2996_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2996_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2996_Tags" xml:space="preserve">
    <value>multi-threading</value>
  </data>
  <data name="S2996_Title" xml:space="preserve">
    <value>"ThreadStatic" fields should not be initialized</value>
  </data>
  <data name="S2996_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S2997_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S2997_Description" xml:space="preserve">
    <value>Typically you want to use using to create a local IDisposable variable; it will trigger disposal of the object when control passes out of the block's scope. The exception to this rule is when your method returns that IDisposable. In that case using disposes of the object before the caller can make use of it, likely causing exceptions at runtime. So you should either remove using or avoid returning the IDisposable.</value>
  </data>
  <data name="S2997_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S2997_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S2997_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S2997_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S2997_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S2997_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S2997_Title" xml:space="preserve">
    <value>"IDisposables" created in a "using" statement should not be returned</value>
  </data>
  <data name="S2997_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3005_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3005_Description" xml:space="preserve">
    <value>When a non-static class field is annotated with ThreadStatic, the code seems to show that the field can have different values for different calling threads, but that's not the case, since the ThreadStatic attribute is simply ignored on non-static fields. </value>
  </data>
  <data name="S3005_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3005_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3005_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3005_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3005_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3005_Tags" xml:space="preserve">
    <value>unused</value>
  </data>
  <data name="S3005_Title" xml:space="preserve">
    <value>"ThreadStatic" should not be used on non-static fields</value>
  </data>
  <data name="S3005_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3010_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3010_Description" xml:space="preserve">
    <value>Assigning a value to a static field in a constructor could cause unreliable behavior at runtime since it will change the value for all instances of the class.</value>
  </data>
  <data name="S3010_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3010_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3010_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S3010_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3010_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3010_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3010_Title" xml:space="preserve">
    <value>Static fields should not be updated in constructors</value>
  </data>
  <data name="S3010_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3011_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S3011_Description" xml:space="preserve">
    <value>Changing or bypassing accessibility is security-sensitive. For example, it has led in the past to the following vulnerability:</value>
  </data>
  <data name="S3011_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3011_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3011_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S3011_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3011_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3011_Tags" xml:space="preserve">
    <value>owasp-a3</value>
  </data>
  <data name="S3011_Title" xml:space="preserve">
    <value>Changing or bypassing accessibility is security-sensitive</value>
  </data>
  <data name="S3011_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S3052_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3052_Description" xml:space="preserve">
    <value>The compiler automatically initializes class fields, auto-properties and events to their default values before setting them with any initialization values, so there is no need to explicitly set a member to its default value. Further, under the logic that cleaner code is better code, it's considered poor style to do so.</value>
  </data>
  <data name="S3052_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3052_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3052_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3052_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3052_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3052_Tags" xml:space="preserve">
    <value>convention,finding</value>
  </data>
  <data name="S3052_Title" xml:space="preserve">
    <value>Members should not be initialized to default values</value>
  </data>
  <data name="S3052_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3060_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S3060_Description" xml:space="preserve">
    <value>There's no valid reason to test this with is. The only plausible explanation for such a test is that you're executing code in a parent class conditionally based on the kind of child class this is. But code that's specific to a child class should be in that child class, not in the parent.</value>
  </data>
  <data name="S3060_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3060_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3060_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S3060_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3060_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S3060_Tags" xml:space="preserve">
    <value>api-design,bad-practice</value>
  </data>
  <data name="S3060_Title" xml:space="preserve">
    <value>"is" should not be used with "this"</value>
  </data>
  <data name="S3060_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3168_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3168_Description" xml:space="preserve">
    <value>An async method with a void return type is a "fire and forget" method best reserved for event handlers because there's no way to wait for the method's execution to complete and respond accordingly. There's also no way to catch exceptions thrown from the method.</value>
  </data>
  <data name="S3168_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3168_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3168_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S3168_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3168_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3168_Tags" xml:space="preserve">
    <value>multi-threading,async-await</value>
  </data>
  <data name="S3168_Title" xml:space="preserve">
    <value>"async" methods should not return "void"</value>
  </data>
  <data name="S3168_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3169_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3169_Description" xml:space="preserve">
    <value>There's no point in chaining multiple OrderBy calls in a LINQ; only the last one will be reflected in the result because each subsequent call completely reorders the list. Thus, calling OrderBy multiple times is a performance issue as well, because all of the sorting will be executed, but only the result of the last sort will be kept.</value>
  </data>
  <data name="S3169_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3169_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3169_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3169_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3169_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3169_Tags" xml:space="preserve">
    <value>performance</value>
  </data>
  <data name="S3169_Title" xml:space="preserve">
    <value>Multiple "OrderBy" calls should not be used</value>
  </data>
  <data name="S3169_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3172_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3172_Description" xml:space="preserve">
    <value>In C#, delegates can be added together to chain their execution, and subtracted to remove their execution from the chain.</value>
  </data>
  <data name="S3172_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3172_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3172_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S3172_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3172_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3172_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3172_Title" xml:space="preserve">
    <value>Delegates should not be subtracted</value>
  </data>
  <data name="S3172_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3215_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3215_Description" xml:space="preserve">
    <value>Needing to cast from an interface to a concrete type indicates that something is wrong with the abstractions in use, likely that something is missing from the interface. Instead of casting to a discrete type, the missing functionality should be added to the interface. Otherwise there is a risk of runtime exceptions.</value>
  </data>
  <data name="S3215_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3215_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3215_RemediationCost" xml:space="preserve">
    <value>1h</value>
  </data>
  <data name="S3215_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3215_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3215_Tags" xml:space="preserve">
    <value>design</value>
  </data>
  <data name="S3215_Title" xml:space="preserve">
    <value>"interface" instances should not be cast to concrete types</value>
  </data>
  <data name="S3215_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3216_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3216_Description" xml:space="preserve">
    <value>After an awaited Task has executed, you can continue execution in the original, calling thread or any arbitrary thread. Unless the rest of the code needs the context from which the Task was spawned, Task.ConfigureAwait(false) should be used to keep execution in the Task thread to avoid the need for context switching and the possibility of deadlocks.</value>
  </data>
  <data name="S3216_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3216_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3216_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S3216_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3216_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3216_Tags" xml:space="preserve">
    <value>multi-threading,suspicious</value>
  </data>
  <data name="S3216_Title" xml:space="preserve">
    <value>"ConfigureAwait(false)" should be used</value>
  </data>
  <data name="S3216_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3217_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3217_Description" xml:space="preserve">
    <value>The foreach statement was introduced in the C# language prior to generics to make it easier to work with the non-generic collections available at that time such as ArrayList. The foreach statements allows you to downcast elements of a collection of Objects to any other type. The problem is that to achieve the cast, the foreach statements silently performs explicit type conversion, which at runtime can result in an InvalidCastException.</value>
  </data>
  <data name="S3217_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3217_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3217_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S3217_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3217_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3217_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S3217_Title" xml:space="preserve">
    <value>"Explicit" conversions of "foreach" loops should not be used</value>
  </data>
  <data name="S3217_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3218_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3218_Description" xml:space="preserve">
    <value>It's possible to name the members of an inner class the same as the static members of its enclosing class - possible, but a bad idea. That's because maintainers may be confused about which members are being used where. Instead the inner class' members should be renamed and all the references updated.</value>
  </data>
  <data name="S3218_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3218_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3218_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3218_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3218_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3218_Tags" xml:space="preserve">
    <value>design,pitfall</value>
  </data>
  <data name="S3218_Title" xml:space="preserve">
    <value>Inner class members should not shadow outer class "static" or type members</value>
  </data>
  <data name="S3218_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3220_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3220_Description" xml:space="preserve">
    <value>The rules for method resolution are complex and perhaps not properly understood by all coders. The params keyword can make method declarations overlap in non-obvious ways, so that slight changes in the argument types of an invocation can resolve to different methods.</value>
  </data>
  <data name="S3220_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3220_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3220_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S3220_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3220_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3220_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S3220_Title" xml:space="preserve">
    <value>Method calls should not resolve ambiguously to overloads with "params"</value>
  </data>
  <data name="S3220_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3234_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3234_Description" xml:space="preserve">
    <value>GC.SuppressFinalize asks the Common Language Runtime not to call the finalizer of an object. This is useful when implementing the dispose pattern where object finalization is already handled in IDisposable.Dispose. However, it has no effect if there is no finalizer defined in the object's type, so using it in such cases is just confusing.</value>
  </data>
  <data name="S3234_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3234_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3234_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3234_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3234_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3234_Tags" xml:space="preserve">
    <value>unused,confusing</value>
  </data>
  <data name="S3234_Title" xml:space="preserve">
    <value>"GC.SuppressFinalize" should not be invoked for types without destructors</value>
  </data>
  <data name="S3234_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3235_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3235_Description" xml:space="preserve">
    <value>Redundant parentheses are simply wasted keystrokes, and should be removed.</value>
  </data>
  <data name="S3235_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3235_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3235_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3235_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3235_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3235_Tags" xml:space="preserve">
    <value>unused,finding</value>
  </data>
  <data name="S3235_Title" xml:space="preserve">
    <value>Redundant parentheses should not be used</value>
  </data>
  <data name="S3235_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3236_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3236_Description" xml:space="preserve">
    <value>Caller information attributes: CallerFilePathAttribute and CallerLineNumberAttribute provide a way to get information about the caller of a method through optional parameters. But the arguments for these optional parameters are only generated if they are not explicitly defined in the call. Thus, specifying the argument values defeats the purpose of the attributes.</value>
  </data>
  <data name="S3236_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3236_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3236_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3236_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3236_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3236_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S3236_Title" xml:space="preserve">
    <value>Caller information arguments should not be provided explicitly</value>
  </data>
  <data name="S3236_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3237_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S3237_Description" xml:space="preserve">
    <value>In property and indexer set methods, and in event add and remove methods, the implicit value parameter holds the value the accessor was called with. Not using the value means that the accessor ignores the caller's intent which could cause unexpected results at runtime.</value>
  </data>
  <data name="S3237_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3237_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3237_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3237_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3237_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S3237_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S3237_Title" xml:space="preserve">
    <value>"value" parameters should be used</value>
  </data>
  <data name="S3237_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3240_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3240_Description" xml:space="preserve">
    <value>In the interests of keeping code clean, the simplest possible conditional syntax should be used. That means </value>
  </data>
  <data name="S3240_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3240_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3240_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3240_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3240_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3240_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S3240_Title" xml:space="preserve">
    <value>The simplest possible condition syntax should be used</value>
  </data>
  <data name="S3240_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3241_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3241_Description" xml:space="preserve">
    <value>Private methods are clearly intended for use only within their own scope. When such methods return values that are never used by any of their callers, then clearly there is no need to actually make the return, and it should be removed in the interests of efficiency and clarity. </value>
  </data>
  <data name="S3241_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3241_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3241_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3241_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3241_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3241_Tags" xml:space="preserve">
    <value>design,unused</value>
  </data>
  <data name="S3241_Title" xml:space="preserve">
    <value>Methods should not return values that are never used</value>
  </data>
  <data name="S3241_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3242_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3242_Description" xml:space="preserve">
    <value>When a derived type is used as a parameter instead of the base type, it limits the uses of the method. If the additional functionality that is provided in the derived type is not requires then that limitation isn't required, and should be removed.</value>
  </data>
  <data name="S3242_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3242_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3242_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3242_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3242_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3242_Tags" xml:space="preserve">
    <value>api-design</value>
  </data>
  <data name="S3242_Title" xml:space="preserve">
    <value>Method parameters should be declared with base types</value>
  </data>
  <data name="S3242_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3244_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3244_Description" xml:space="preserve">
    <value>It is possible to subscribe to events with anonymous delegates, but having done so, it is impossible to unsubscribe from them. That's because the process of subscribing adds the delegate to a list. The process of unsubscribing essentially says: remove this item from the subscription list. But because an anonymous delegate was used in both cases, the unsubscribe attempt tries to remove a different item from the list than was added. The result: NOOP.</value>
  </data>
  <data name="S3244_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3244_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3244_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S3244_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3244_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3244_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3244_Title" xml:space="preserve">
    <value>Anonymous delegates should not be used to unsubscribe from Events</value>
  </data>
  <data name="S3244_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3246_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3246_Description" xml:space="preserve">
    <value>In the interests of making code as usable as possible, interfaces and delegates with generic parameters should use the out and in modifiers when possible to make the interfaces and delegates covariant and contravariant, respectively.</value>
  </data>
  <data name="S3246_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3246_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3246_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3246_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3246_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3246_Tags" xml:space="preserve">
    <value>api-design</value>
  </data>
  <data name="S3246_Title" xml:space="preserve">
    <value>Generic type parameters should be co/contravariant when possible</value>
  </data>
  <data name="S3246_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3247_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3247_Description" xml:space="preserve">
    <value>Because the is operator performs a cast if the object is not null, using is to check type and then casting the same argument to that type, necessarily performs two casts. The same result can be achieved more efficiently with a single cast using as, followed by a null-check.</value>
  </data>
  <data name="S3247_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3247_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3247_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3247_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3247_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3247_Tags" xml:space="preserve">
    <value>performance</value>
  </data>
  <data name="S3247_Title" xml:space="preserve">
    <value>Duplicate casts should not be made</value>
  </data>
  <data name="S3247_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3249_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3249_Description" xml:space="preserve">
    <value>Making a base call in an overriding method is generally a good idea, but not in GetHashCode and Equals for classes that directly extend object because those methods are based on the object reference. Meaning that no two objects that use those base methods will ever be equal or have the same hash.</value>
  </data>
  <data name="S3249_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3249_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3249_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S3249_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3249_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3249_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3249_Title" xml:space="preserve">
    <value>Classes directly extending "object" should not call "base" in "GetHashCode" or "Equals"</value>
  </data>
  <data name="S3249_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3251_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3251_Description" xml:space="preserve">
    <value>partial methods allow an increased degree of flexibility in programming a system. Hooks can be added to generated code by invoking methods that define their signature, but might not have an implementation yet. But if the implementation is still missing when the code makes it to production, the compiler silently removes the call. In the best case scenario, such calls simply represent cruft, but in they worst case they are critical, missing functionality, the loss of which will lead to unexpected results at runtime.</value>
  </data>
  <data name="S3251_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3251_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3251_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S3251_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3251_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3251_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S3251_Title" xml:space="preserve">
    <value>Implementations should be provided for "partial" methods</value>
  </data>
  <data name="S3251_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3253_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3253_Description" xml:space="preserve">
    <value>Since the compiler will automatically invoke the base type's no-argument constructor, there's no need to specify its invocation explicitly. Also, when only a single public parameterless constructor is defined in a class, then that constructor can be removed because the compiler would generate it automatically. Similarly, empty static constructors and empty destructors are also wasted keystrokes.</value>
  </data>
  <data name="S3253_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3253_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3253_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3253_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3253_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3253_Tags" xml:space="preserve">
    <value>finding,clumsy</value>
  </data>
  <data name="S3253_Title" xml:space="preserve">
    <value>Constructor and destructor declarations should not be redundant</value>
  </data>
  <data name="S3253_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3254_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3254_Description" xml:space="preserve">
    <value>Specifying the default parameter values in a method call is redundant. Such values should be omitted in the interests of readability.</value>
  </data>
  <data name="S3254_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3254_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3254_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3254_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3254_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3254_Tags" xml:space="preserve">
    <value>finding,clumsy</value>
  </data>
  <data name="S3254_Title" xml:space="preserve">
    <value>Default parameter values should not be passed as arguments</value>
  </data>
  <data name="S3254_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3256_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3256_Description" xml:space="preserve">
    <value>Using string.Equals to determine if a string is empty is significantly slower than using string.IsNullOrEmpty() or checking for string.Length == 0. string.IsNullOrEmpty() is both clear and concise, and therefore preferred to laborious, error-prone, manual null- and emptiness-checking.</value>
  </data>
  <data name="S3256_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3256_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3256_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3256_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3256_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3256_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S3256_Title" xml:space="preserve">
    <value>"string.IsNullOrEmpty" should be used</value>
  </data>
  <data name="S3256_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3257_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3257_Description" xml:space="preserve">
    <value>Unnecessarily verbose declarations and initializations make it harder to read the code, and should be simplified.</value>
  </data>
  <data name="S3257_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3257_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3257_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S3257_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3257_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3257_Tags" xml:space="preserve">
    <value>finding,clumsy</value>
  </data>
  <data name="S3257_Title" xml:space="preserve">
    <value>Declarations and initializations should be as concise as possible</value>
  </data>
  <data name="S3257_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3261_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3261_Description" xml:space="preserve">
    <value>Namespaces with no lines of code clutter a project and should be removed. </value>
  </data>
  <data name="S3261_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3261_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3261_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3261_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3261_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3261_Tags" xml:space="preserve">
    <value>unused</value>
  </data>
  <data name="S3261_Title" xml:space="preserve">
    <value>Namespaces should not be empty</value>
  </data>
  <data name="S3261_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3262_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3262_Description" xml:space="preserve">
    <value>Overriding methods automatically inherit the params behavior. To ease readability, this modifier should be explicitly used in the overriding method as well.</value>
  </data>
  <data name="S3262_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3262_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3262_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3262_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3262_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3262_Tags" xml:space="preserve">
    <value>confusing</value>
  </data>
  <data name="S3262_Title" xml:space="preserve">
    <value>"params" should be used on overrides</value>
  </data>
  <data name="S3262_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3263_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3263_Description" xml:space="preserve">
    <value>Static field initializers are executed in the order in which they appear in the class from top to bottom. Thus, placing a static field in a class above the field or fields required for its initialization will yield unexpected results.</value>
  </data>
  <data name="S3263_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3263_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3263_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3263_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3263_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3263_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3263_Title" xml:space="preserve">
    <value>Static fields should appear in the order they must be initialized </value>
  </data>
  <data name="S3263_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3264_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3264_Description" xml:space="preserve">
    <value>Events that are not invoked anywhere are dead code, and there's no good reason to keep them in the source.</value>
  </data>
  <data name="S3264_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3264_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3264_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3264_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3264_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3264_Tags" xml:space="preserve">
    <value>unused</value>
  </data>
  <data name="S3264_Title" xml:space="preserve">
    <value>Events should be invoked</value>
  </data>
  <data name="S3264_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3265_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3265_Description" xml:space="preserve">
    <value>enums are usually used to identify distinct elements in a set of values. However enums can be treated as bit fields and bitwise operations can be used on them to combine the values. This is a good way of specifying multiple elements of set with a single value. When enums are used this way, it is a best practice to mark the enum with the FlagsAttribute.</value>
  </data>
  <data name="S3265_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3265_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3265_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3265_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3265_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3265_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S3265_Title" xml:space="preserve">
    <value>Non-flags enums should not be used in bitwise operations</value>
  </data>
  <data name="S3265_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3330_Category" xml:space="preserve">
    <value>Critical Vulnerability</value>
  </data>
  <data name="S3330_Description" xml:space="preserve">
    <value>The HttpOnly cookie attribute tells the browser to prevent client-side scripts from reading cookies with the attribute, and its use can go a long way to defending against Cross-Site Scripting (XSS) attacks. Thus, as a precaution, the attribute should be set by default on all cookies set server-side, such as session id cookies.</value>
  </data>
  <data name="S3330_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3330_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3330_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3330_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3330_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3330_Tags" xml:space="preserve">
    <value>cwe,sans-top25-insecure,owasp-a7</value>
  </data>
  <data name="S3330_Title" xml:space="preserve">
    <value>"HttpOnly" should be set on cookies</value>
  </data>
  <data name="S3330_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S3343_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3343_Description" xml:space="preserve">
    <value>Caller information attributes (CallerFilePathAttribute, CallerLineNumberAttribute, and CallerMemberNameAttribute) provide a way to get information about the caller of a method through optional parameters. But they only work right if their values aren't provided explicitly. So if you define a method with caller info attributes in the middle of the parameter list, you put your callers in a bad position: they are forced to use named arguments if they want to use the method properly.</value>
  </data>
  <data name="S3343_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3343_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3343_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3343_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3343_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3343_Tags" xml:space="preserve">
    <value>api-design</value>
  </data>
  <data name="S3343_Title" xml:space="preserve">
    <value>Caller information parameters should come at the end of the parameter list</value>
  </data>
  <data name="S3343_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3346_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3346_Description" xml:space="preserve">
    <value>An assertion is a piece of code that's used during development when the compilation debug mode is activated. It allows a program to check itself as it runs. When an assertion is true, that means everything is operating as expected. </value>
  </data>
  <data name="S3346_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3346_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3346_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3346_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3346_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3346_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3346_Title" xml:space="preserve">
    <value>Expressions used in "Debug.Assert" should not produce side effects</value>
  </data>
  <data name="S3346_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3353_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3353_Description" xml:space="preserve">
    <value>Marking a variable that is unchanged after initialization const is an indication to future maintainers that "no this isn't updated, and it's not supposed to be". const should be used in these situations in the interests of code clarity.</value>
  </data>
  <data name="S3353_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3353_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3353_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3353_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3353_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3353_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3353_Title" xml:space="preserve">
    <value>Unchanged local variables should be "const"</value>
  </data>
  <data name="S3353_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3358_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3358_Description" xml:space="preserve">
    <value>Just because you can do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you) scratching their heads and cursing.</value>
  </data>
  <data name="S3358_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3358_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3358_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3358_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3358_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3358_Tags" xml:space="preserve">
    <value>confusing</value>
  </data>
  <data name="S3358_Title" xml:space="preserve">
    <value>Ternary operators should not be nested</value>
  </data>
  <data name="S3358_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3366_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3366_Description" xml:space="preserve">
    <value>In single-threaded environments, the use of this in constructors is normal, and expected. But in multi-threaded environments, it could expose partially-constructed objects to other threads, and should be used with caution.</value>
  </data>
  <data name="S3366_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3366_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3366_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S3366_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3366_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3366_Tags" xml:space="preserve">
    <value>multi-threading,suspicious</value>
  </data>
  <data name="S3366_Title" xml:space="preserve">
    <value>"this" should not be exposed from constructors</value>
  </data>
  <data name="S3366_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3376_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3376_Description" xml:space="preserve">
    <value>Adherence to the standard naming conventions makes your code not only more readable, but more usable. For instance, class FirstAttribute : Attribute can be used simply with First, but you must use the full name for class AttributeOne : Attribute.</value>
  </data>
  <data name="S3376_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3376_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3376_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3376_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3376_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3376_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S3376_Title" xml:space="preserve">
    <value>Attribute, EventArgs, and Exception type names should end with the type being extended</value>
  </data>
  <data name="S3376_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3397_Category" xml:space="preserve">
    <value>Minor Bug</value>
  </data>
  <data name="S3397_Description" xml:space="preserve">
    <value>object.Equals() overrides can be optimized by checking first for reference equality between this and the parameter. This check can be implemented by calling object.ReferenceEquals() or base.Equals(), where base is object. However, using base.Equals() is a maintenance hazard because while it works if you extend Object directly, if you introduce a new base class that overrides Equals, it suddenly stops working.</value>
  </data>
  <data name="S3397_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3397_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3397_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3397_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3397_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3397_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3397_Title" xml:space="preserve">
    <value>"base.Equals" should not be used to check for reference equality in "Equals" if "base" is not "object"</value>
  </data>
  <data name="S3397_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3400_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3400_Description" xml:space="preserve">
    <value>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a method call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </value>
  </data>
  <data name="S3400_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3400_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3400_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3400_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3400_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3400_Tags" xml:space="preserve">
    <value>confusing</value>
  </data>
  <data name="S3400_Title" xml:space="preserve">
    <value>Methods should not return constants</value>
  </data>
  <data name="S3400_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3415_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3415_Description" xml:space="preserve">
    <value>The standard assertions library methods such as AreEqual and AreSame in MSTest and NUnit, or Equal and Same in XUnit, expect the first argument to be the expected value and the second argument to be the actual value. Swap them, and your test will still have the same outcome (succeed/fail when it should) but the error messages will be confusing. </value>
  </data>
  <data name="S3415_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3415_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3415_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3415_Scope" xml:space="preserve">
    <value>Tests</value>
  </data>
  <data name="S3415_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3415_Tags" xml:space="preserve">
    <value>tests,suspicious</value>
  </data>
  <data name="S3415_Title" xml:space="preserve">
    <value>Assertion arguments should be passed in the correct order</value>
  </data>
  <data name="S3415_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3427_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S3427_Description" xml:space="preserve">
    <value>The rules for method resolution are complex and perhaps not properly understood by all coders. Having overloads with optional parameter values makes the matter even harder to understand. </value>
  </data>
  <data name="S3427_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3427_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3427_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3427_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3427_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S3427_Tags" xml:space="preserve">
    <value>unused,pitfall</value>
  </data>
  <data name="S3427_Title" xml:space="preserve">
    <value>Method overloads with default parameter values should not overlap </value>
  </data>
  <data name="S3427_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3431_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3431_Description" xml:space="preserve">
    <value>It should be clear to a casual reader what code a test is testing and what results are expected. Unfortunately, that's not usually the case with the [ExpectedException] attribute since an exception could be thrown from almost any line in the method.</value>
  </data>
  <data name="S3431_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3431_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3431_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3431_Scope" xml:space="preserve">
    <value>Tests</value>
  </data>
  <data name="S3431_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3431_Tags" xml:space="preserve">
    <value>tests</value>
  </data>
  <data name="S3431_Title" xml:space="preserve">
    <value>"[ExpectedException]" should not be used</value>
  </data>
  <data name="S3431_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3433_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S3433_Description" xml:space="preserve">
    <value>A method is detected as test method if marked with one of the following attributes [TestMethod] or [DataTestMethod] (for mstest), [Fact] or [Theory] (for xunit) or [Test], [TestCase], [TestCaseSource] or [Theory] (for nunit). However, whether or not they have a test attribute, non-public methods are not recognized as tests, and therefore not executed. Neither are async void methods, or methods with generics anywhere in their signatures. </value>
  </data>
  <data name="S3433_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3433_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3433_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3433_Scope" xml:space="preserve">
    <value>Tests</value>
  </data>
  <data name="S3433_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S3433_Tags" xml:space="preserve">
    <value>tests</value>
  </data>
  <data name="S3433_Title" xml:space="preserve">
    <value>Test method signatures should be correct</value>
  </data>
  <data name="S3433_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3440_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3440_Description" xml:space="preserve">
    <value>There's no point in checking a variable against the value you're about to assign it. Save the cycles and lines of code, and simply perform the assignment.</value>
  </data>
  <data name="S3440_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3440_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3440_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3440_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3440_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3440_Tags" xml:space="preserve">
    <value>confusing</value>
  </data>
  <data name="S3440_Title" xml:space="preserve">
    <value>Variables should not be checked against the values they're about to be assigned</value>
  </data>
  <data name="S3440_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3441_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3441_Description" xml:space="preserve">
    <value>When an anonymous type's properties are copied from properties or variables with the same names, it yields cleaner code to omit the new type's property name and the assignment operator.</value>
  </data>
  <data name="S3441_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3441_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3441_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3441_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3441_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3441_Tags" xml:space="preserve">
    <value>finding,clumsy</value>
  </data>
  <data name="S3441_Title" xml:space="preserve">
    <value>Redundant property names should be omitted in anonymous classes</value>
  </data>
  <data name="S3441_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3442_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3442_Description" xml:space="preserve">
    <value>Since abstract classes can't be instantiated, there's no point in their having public or internal constructors. If there is basic initialization logic that should run when an extending class instance is created, you can by all means put it in a constructor, but make that constructor private or protected.</value>
  </data>
  <data name="S3442_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3442_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3442_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3442_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3442_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3442_Tags" xml:space="preserve">
    <value>confusing</value>
  </data>
  <data name="S3442_Title" xml:space="preserve">
    <value>"abstract" classes should not have "public" constructors</value>
  </data>
  <data name="S3442_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3443_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S3443_Description" xml:space="preserve">
    <value>If you call GetType() on a Type variable, the return value will always be typeof(System.Type). So there's no real point in making that call. The same applies to passing a type argument to IsInstanceOfType. In both cases the results are entirely predictable.</value>
  </data>
  <data name="S3443_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3443_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3443_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3443_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3443_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S3443_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S3443_Title" xml:space="preserve">
    <value>Type should not be examined on "System.Type" instances</value>
  </data>
  <data name="S3443_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3444_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3444_Description" xml:space="preserve">
    <value>When an interface inherits from two interfaces that both define a member with the same name, trying to access that member through the derived interface will result in the compiler error CS0229 Ambiguity between 'IBase1.SomeProperty' and 'IBase2.SomeProperty'.</value>
  </data>
  <data name="S3444_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3444_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3444_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3444_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3444_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3444_Tags" xml:space="preserve">
    <value>design</value>
  </data>
  <data name="S3444_Title" xml:space="preserve">
    <value>Interfaces should not simply inherit from base interfaces with colliding members</value>
  </data>
  <data name="S3444_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3445_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3445_Description" xml:space="preserve">
    <value>When rethrowing an exception, you should do it by simply calling throw; and not throw exc;, because the stack trace is reset with the second syntax, making debugging a lot harder.</value>
  </data>
  <data name="S3445_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3445_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3445_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3445_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3445_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3445_Tags" xml:space="preserve">
    <value>error-handling,confusing</value>
  </data>
  <data name="S3445_Title" xml:space="preserve">
    <value>Exceptions should not be explicitly rethrown</value>
  </data>
  <data name="S3445_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3447_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3447_Description" xml:space="preserve">
    <value>The use of ref or out in combination with [Optional] is both confusing and contradictory. [Optional] indicates that the parameter doesn't have to be provided, while out and ref mean that the parameter will be used to return data to the caller (ref additionally indicates that the parameter may also be used to pass data into the method).</value>
  </data>
  <data name="S3447_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3447_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3447_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3447_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3447_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3447_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S3447_Title" xml:space="preserve">
    <value>"[Optional]" should not be used on "ref" or "out" parameters</value>
  </data>
  <data name="S3447_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3449_Category" xml:space="preserve">
    <value>Critical Bug</value>
  </data>
  <data name="S3449_Description" xml:space="preserve">
    <value>Numbers can be shifted with the &lt;&lt; and &gt;&gt; operators, but the right operand of the operation needs to be an int or a type that has an implicit conversion to int. However, with dynamic, the compiler's type checking is turned off, so you can pass anything to a shift operator and have it compile. And if the argument can't be converted to int at runtime, then a RuntimeBinderException will be raised.</value>
  </data>
  <data name="S3449_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3449_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3449_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3449_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3449_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3449_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3449_Title" xml:space="preserve">
    <value>Right operands of shift operators should be integers</value>
  </data>
  <data name="S3449_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3450_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3450_Description" xml:space="preserve">
    <value>There is no point in providing a default value for a parameter if callers are required to provide a value for it anyway. Thus, [DefaultParameterValue] should always be used in conjunction with [Optional].</value>
  </data>
  <data name="S3450_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3450_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3450_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3450_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3450_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3450_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S3450_Title" xml:space="preserve">
    <value>Parameters with "[DefaultParameterValue]" attributes should also be marked "[Optional]"</value>
  </data>
  <data name="S3450_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3451_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3451_Description" xml:space="preserve">
    <value>The use of [DefaultValue] with [Optional] has no more effect than [Optional] alone. That's because [DefaultValue] doesn't actually do anything; it merely indicates the intent for the value. More than likely, [DefaultValue] was used in confusion instead of [DefaultParameterValue].</value>
  </data>
  <data name="S3451_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3451_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3451_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3451_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3451_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3451_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S3451_Title" xml:space="preserve">
    <value>"[DefaultValue]" should not be used when "[DefaultParameterValue]" is meant</value>
  </data>
  <data name="S3451_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3453_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3453_Description" xml:space="preserve">
    <value>A class with only private constructors can't be instantiated, thus, it seems to be pointless code.</value>
  </data>
  <data name="S3453_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3453_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3453_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3453_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3453_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3453_Tags" xml:space="preserve">
    <value>design</value>
  </data>
  <data name="S3453_Title" xml:space="preserve">
    <value>Classes should not have only "private" constructors</value>
  </data>
  <data name="S3453_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3456_Category" xml:space="preserve">
    <value>Minor Bug</value>
  </data>
  <data name="S3456_Description" xml:space="preserve">
    <value>ToCharArray can be omitted when the operation on the array could have been done directly on the string, such as when iterating over the characters in a string, and when accessing a character in a string via an array index. In those cases, explicit ToCharArray calls should be omitted.</value>
  </data>
  <data name="S3456_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3456_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3456_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3456_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3456_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3456_Tags" xml:space="preserve">
    <value>clumsy</value>
  </data>
  <data name="S3456_Title" xml:space="preserve">
    <value>"string.ToCharArray()" should not be called redundantly</value>
  </data>
  <data name="S3456_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3457_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3457_Description" xml:space="preserve">
    <value>Because composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected behaviors or runtime errors. This rule statically validates the good behavior of composite formats when calling the methods of String.Format, StringBuilder.AppendFormat, Console.Write, Console.WriteLine, TextWriter.Write, TextWriter.WriteLine, Debug.WriteLine(String, Object[]), Trace.TraceError(String, Object[]), Trace.TraceInformation(String, Object[]), Trace.TraceWarning(String, Object[]) and TraceSource.TraceInformation(String, Object[]). </value>
  </data>
  <data name="S3457_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3457_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3457_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3457_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3457_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3457_Tags" xml:space="preserve">
    <value>confusing</value>
  </data>
  <data name="S3457_Title" xml:space="preserve">
    <value>Composite format strings should be used correctly</value>
  </data>
  <data name="S3457_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3458_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3458_Description" xml:space="preserve">
    <value>Empty case clauses that fall through to the default are useless. Whether or not such a case is present, the default clause will be invoked. Such cases simply clutter the code, and should be removed.</value>
  </data>
  <data name="S3458_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3458_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3458_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S3458_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3458_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3458_Tags" xml:space="preserve">
    <value>finding,clumsy</value>
  </data>
  <data name="S3458_Title" xml:space="preserve">
    <value>Empty "case" clauses that fall through to the "default" should be omitted</value>
  </data>
  <data name="S3458_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3459_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3459_Description" xml:space="preserve">
    <value>Fields and auto-properties that are never assigned to hold the default values for their types. They are either pointless code or, more likely, mistakes. </value>
  </data>
  <data name="S3459_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3459_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3459_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3459_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3459_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3459_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S3459_Title" xml:space="preserve">
    <value>Unassigned members should be removed</value>
  </data>
  <data name="S3459_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3464_Category" xml:space="preserve">
    <value>Blocker Bug</value>
  </data>
  <data name="S3464_Description" xml:space="preserve">
    <value>Recursion is acceptable in methods, where you can break out of it. But with class types, you end up with code that will compile but not run if you try to instantiate the class.</value>
  </data>
  <data name="S3464_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3464_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3464_RemediationCost" xml:space="preserve">
    <value>1h</value>
  </data>
  <data name="S3464_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3464_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S3464_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3464_Title" xml:space="preserve">
    <value>Type inheritance should not be recursive</value>
  </data>
  <data name="S3464_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3466_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3466_Description" xml:space="preserve">
    <value>Generally, writing the least code that will readably do the job is a good thing, so omitting default parameter values seems to make sense. Unfortunately, when you omit them from the base call in an override, you're not actually getting the job done thoroughly, because you're ignoring the value the caller passed in. The result will likely not be what the caller expected.</value>
  </data>
  <data name="S3466_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3466_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3466_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3466_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3466_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3466_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3466_Title" xml:space="preserve">
    <value>Optional parameters should be passed to "base" calls</value>
  </data>
  <data name="S3466_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3532_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3532_Description" xml:space="preserve">
    <value>The default clause should take appropriate action. Having an empty default is a waste of keystrokes.</value>
  </data>
  <data name="S3532_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3532_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3532_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S3532_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3532_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3532_Tags" xml:space="preserve">
    <value>unused,finding,clumsy</value>
  </data>
  <data name="S3532_Title" xml:space="preserve">
    <value>Empty "default" clauses should be removed</value>
  </data>
  <data name="S3532_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3597_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3597_Description" xml:space="preserve">
    <value>The ServiceContract attribute specifies that a class or interface defines the communication contract of a Windows Communication Foundation (WCF) service. The service operations of this class or interface are defined by OperationContract attributes added to methods. It doesn't make sense to define a contract without any service operations; thus, in a ServiceContract class or interface at least one method should be annotated with OperationContract. Similarly, WCF only serves OperationContract methods that are defined inside ServiceContract classes or interfaces; thus, this rule also checks that ServiceContract is added to the containing type of OperationContract methods.</value>
  </data>
  <data name="S3597_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3597_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3597_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3597_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3597_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3597_Tags" xml:space="preserve">
    <value>api-design</value>
  </data>
  <data name="S3597_Title" xml:space="preserve">
    <value>"ServiceContract" and "OperationContract" attributes should be used together</value>
  </data>
  <data name="S3597_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3598_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3598_Description" xml:space="preserve">
    <value>When declaring a Windows Communication Foundation (WCF) OperationContract method one-way, that service method won't return any result, not even an underlying empty confirmation message. These are fire-and-forget methods that are useful in event-like communication. Specifying a return type therefore does not make sense.</value>
  </data>
  <data name="S3598_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3598_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3598_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S3598_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3598_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3598_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3598_Title" xml:space="preserve">
    <value>One-way "OperationContract" methods should have "void" return type</value>
  </data>
  <data name="S3598_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3600_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3600_Description" xml:space="preserve">
    <value>Adding params to a method override has no effect. The compiler accepts it, but the callers won't be able to benefit from the added modifier.</value>
  </data>
  <data name="S3600_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3600_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3600_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S3600_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3600_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3600_Tags" xml:space="preserve">
    <value>confusing</value>
  </data>
  <data name="S3600_Title" xml:space="preserve">
    <value>"params" should not be introduced on overrides</value>
  </data>
  <data name="S3600_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3603_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3603_Description" xml:space="preserve">
    <value>Marking a method with the Pure attribute specifies that the method doesn't make any visible changes; thus, the method should return a result, otherwise the call to the method should be equal to no-operation. So Pure on a void method is either a mistake, or the method doesn't do any meaningful task.</value>
  </data>
  <data name="S3603_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3603_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3603_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3603_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3603_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3603_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3603_Title" xml:space="preserve">
    <value>Methods with "Pure" attribute should return a value </value>
  </data>
  <data name="S3603_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3604_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3604_Description" xml:space="preserve">
    <value>Fields, properties and events can be initialized either inline or in the constructor. Initializing them inline and in the constructor at the same time is redundant; the inline initialization will be overridden.</value>
  </data>
  <data name="S3604_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3604_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3604_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S3604_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3604_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3604_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3604_Title" xml:space="preserve">
    <value>Member initializer values should not be redundant</value>
  </data>
  <data name="S3604_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3610_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3610_Description" xml:space="preserve">
    <value>Calling GetType() on a nullable object returns the underlying value type. Thus, comparing the returned Type object to typeof(Nullable&lt;SomeType&gt;) doesn't make sense. The comparison either throws an exception or the result can be known at compile time.</value>
  </data>
  <data name="S3610_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3610_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3610_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3610_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3610_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3610_Tags" xml:space="preserve">
    <value>redundant</value>
  </data>
  <data name="S3610_Title" xml:space="preserve">
    <value>Nullable type comparison should not be redundant</value>
  </data>
  <data name="S3610_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3626_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3626_Description" xml:space="preserve">
    <value>Jump statements, such as return, yield break, goto, and continue let you change the default flow of program execution, but jump statements that direct the control flow to the original direction are just a waste of keystrokes.</value>
  </data>
  <data name="S3626_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3626_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3626_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S3626_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3626_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3626_Tags" xml:space="preserve">
    <value>redundant,clumsy</value>
  </data>
  <data name="S3626_Title" xml:space="preserve">
    <value>Jump statements should not be redundant</value>
  </data>
  <data name="S3626_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3655_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3655_Description" xml:space="preserve">
    <value>Nullable value types can hold either a value or null. The value held in the nullable type can be accessed with the Value property, but .Value throws an InvalidOperationException when the value is null. To avoid the exception, a nullable type should always be tested before .Value is accessed.</value>
  </data>
  <data name="S3655_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3655_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3655_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3655_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3655_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3655_Tags" xml:space="preserve">
    <value>cwe</value>
  </data>
  <data name="S3655_Title" xml:space="preserve">
    <value>Empty nullable value should not be accessed</value>
  </data>
  <data name="S3655_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3693_Category" xml:space="preserve">
    <value>Blocker Bug</value>
  </data>
  <data name="S3693_Description" xml:space="preserve">
    <value>It may be a good idea to raise an exception in a constructor if you're unable to fully flesh the object in question, but not in an exception constructor. If you do, you'll interfere with the exception that was originally being thrown. Further, it is highly unlikely that an exception raised in the creation of an exception will be properly handled in the calling code, and the unexpected, unhandled exception will lead to program termination.</value>
  </data>
  <data name="S3693_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3693_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3693_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S3693_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3693_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S3693_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3693_Title" xml:space="preserve">
    <value>Exception constructors should not throw exceptions</value>
  </data>
  <data name="S3693_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3717_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3717_Description" xml:space="preserve">
    <value>NotImplementedException is often used to mark methods which must be implemented for the overall functionality to be complete, but which the developer wants to implement later. That's as opposed to the NotSupportedException which is thrown by methods which are required by base classes or interfaces, but which are not appropriate to the current class.</value>
  </data>
  <data name="S3717_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3717_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3717_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3717_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3717_Title" xml:space="preserve">
    <value>Track use of "NotImplementedException"</value>
  </data>
  <data name="S3717_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3776_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3776_Description" xml:space="preserve">
    <value>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be difficult to maintain.</value>
  </data>
  <data name="S3776_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3776_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3776_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3776_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3776_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3776_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S3776_Title" xml:space="preserve">
    <value>Cognitive Complexity of methods should not be too high</value>
  </data>
  <data name="S3776_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3869_Category" xml:space="preserve">
    <value>Blocker Bug</value>
  </data>
  <data name="S3869_Description" xml:space="preserve">
    <value>Not surprisingly, the SafeHandle.DangerousGetHandle method is dangerous. That's because it may not return a valid handle. Using it can lead to leaks and vulnerabilities. While it is possible to use the method successfully, it's extremely difficult to do correctly, so the method should simply be avoided altogether.</value>
  </data>
  <data name="S3869_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3869_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3869_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S3869_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3869_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S3869_Tags" xml:space="preserve">
    <value>leak,unpredictable</value>
  </data>
  <data name="S3869_Title" xml:space="preserve">
    <value>"SafeHandle.DangerousGetHandle" should not be called</value>
  </data>
  <data name="S3869_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3871_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3871_Description" xml:space="preserve">
    <value>The point of having custom exception types is to convey more information than is available in standard types. But custom exception types must be public for that to work. </value>
  </data>
  <data name="S3871_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3871_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3871_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3871_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3871_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3871_Tags" xml:space="preserve">
    <value>error-handling,api-design,owasp-a10</value>
  </data>
  <data name="S3871_Title" xml:space="preserve">
    <value>Exception types should be "public"</value>
  </data>
  <data name="S3871_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3872_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3872_Description" xml:space="preserve">
    <value>The name of a method should communicate what it does, and the names of its parameters should indicate how they're used. If a method and its parameter have the same name it is an indication that one of these rules of thumb has been broken, if not both. Even if by some trick of language that's not the case, it is still likely to confuse callers and maintainers.</value>
  </data>
  <data name="S3872_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3872_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3872_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3872_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3872_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3872_Tags" xml:space="preserve">
    <value>convention,confusing</value>
  </data>
  <data name="S3872_Title" xml:space="preserve">
    <value>Parameter names should not duplicate the names of their methods</value>
  </data>
  <data name="S3872_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3874_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3874_Description" xml:space="preserve">
    <value>Passing a parameter by reference, which is what happens when you use the out or ref parameter modifiers, means that the method will receive a pointer to the argument, rather than the argument itself. If the argument was a value type, the method will be able to change the argument's values. If it was a reference type, then the method receives a pointer to a pointer, which is usually not what was intended. Even when it is what was intended, this is the sort of thing that's difficult to get right, and should be used with caution.</value>
  </data>
  <data name="S3874_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3874_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3874_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S3874_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3874_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3874_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S3874_Title" xml:space="preserve">
    <value>"out" and "ref" parameters should not be used</value>
  </data>
  <data name="S3874_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3875_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S3875_Description" xml:space="preserve">
    <value>The use of == to compare to objects is expected to do a reference comparison. That is, it is expected to return true if and only if they are the same object instance. Overloading the operator to do anything else will inevitably lead to the introduction of bugs by callers. On the other hand, overloading it to do exactly that is pointless; that's what == does by default.</value>
  </data>
  <data name="S3875_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3875_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3875_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S3875_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3875_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S3875_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S3875_Title" xml:space="preserve">
    <value>"operator==" should not be overloaded on reference types</value>
  </data>
  <data name="S3875_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3876_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3876_Description" xml:space="preserve">
    <value>Strings and integral types are typically used as indexers. When some other type is required, it typically indicates design problems, and potentially a situation where a method should be used instead.</value>
  </data>
  <data name="S3876_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3876_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3876_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S3876_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3876_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3876_Tags" xml:space="preserve">
    <value>design</value>
  </data>
  <data name="S3876_Title" xml:space="preserve">
    <value>Strings or integral types should be used for indexers</value>
  </data>
  <data name="S3876_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3877_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S3877_Description" xml:space="preserve">
    <value>It is expected that some methods should be called with caution, but others, such as ToString, are expected to "just work". Throwing an exception from such a method is likely to break callers' code unexpectedly.</value>
  </data>
  <data name="S3877_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3877_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3877_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S3877_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3877_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S3877_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S3877_Title" xml:space="preserve">
    <value>Exceptions should not be thrown from unexpected methods</value>
  </data>
  <data name="S3877_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3880_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3880_Description" xml:space="preserve">
    <value>Finalizers come with a performance cost due to the overhead of tracking the life cycle of objects. An empty one is consequently costly with no benefit or justification.</value>
  </data>
  <data name="S3880_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3880_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3880_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3880_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3880_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3880_Tags" xml:space="preserve">
    <value>performance</value>
  </data>
  <data name="S3880_Title" xml:space="preserve">
    <value>Finalizers should not be empty</value>
  </data>
  <data name="S3880_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3881_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3881_Description" xml:space="preserve">
    <value>The IDisposable interface is a mechanism to release unmanaged resources, if not implemented correctly this could result in resource leaks or more severe bugs.</value>
  </data>
  <data name="S3881_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3881_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3881_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3881_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3881_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3881_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S3881_Title" xml:space="preserve">
    <value>"IDisposable" should be implemented correctly</value>
  </data>
  <data name="S3881_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3884_Category" xml:space="preserve">
    <value>Blocker Vulnerability</value>
  </data>
  <data name="S3884_Description" xml:space="preserve">
    <value>CoSetProxyBlanket and CoInitializeSecurity both work to set the permissions context in which the process invoked immediately after is executed. Calling them from within that process is useless because it's too late at that point; the permissions context has already been set.</value>
  </data>
  <data name="S3884_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3884_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3884_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S3884_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3884_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S3884_Tags" xml:space="preserve">
    <value>owasp-a6</value>
  </data>
  <data name="S3884_Title" xml:space="preserve">
    <value>"CoSetProxyBlanket" and "CoInitializeSecurity" should not be used</value>
  </data>
  <data name="S3884_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S3885_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3885_Description" xml:space="preserve">
    <value>The parameter to Assembly.Load includes the full specification of the dll to be loaded. Use another method, and you might end up with a dll other than the one you expected. </value>
  </data>
  <data name="S3885_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3885_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3885_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3885_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3885_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3885_Tags" xml:space="preserve">
    <value>unpredictable</value>
  </data>
  <data name="S3885_Title" xml:space="preserve">
    <value>"Assembly.Load" should be used</value>
  </data>
  <data name="S3885_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3887_Category" xml:space="preserve">
    <value>Minor Bug</value>
  </data>
  <data name="S3887_Description" xml:space="preserve">
    <value>Using the readonly keyword on a field means that it can't be changed after initialization. However, when applied to collections or arrays, that's only partly true. readonly enforces that another instance can't be assigned to the field, but it cannot keep the contents from being updated. That means that in practice, the field value really can be changed, and the use of readonly on such a field is misleading, and you're likely to not be getting the behavior you expect.</value>
  </data>
  <data name="S3887_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3887_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3887_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S3887_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3887_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3887_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3887_Title" xml:space="preserve">
    <value>Mutable, non-private fields should not be "readonly"</value>
  </data>
  <data name="S3887_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3889_Category" xml:space="preserve">
    <value>Blocker Bug</value>
  </data>
  <data name="S3889_Description" xml:space="preserve">
    <value>Thread.Suspend and Thread.Resume can give unpredictable results, and both methods have been deprecated. Indeed, if Thread.Suspend is not used very carefully, a thread can be suspended while holding a lock, thus leading to a deadlock. Other safer synchronization mechanisms should be used, such as Monitor, Mutex, and Semaphore.</value>
  </data>
  <data name="S3889_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3889_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3889_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S3889_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3889_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S3889_Tags" xml:space="preserve">
    <value>multi-threading,unpredictable</value>
  </data>
  <data name="S3889_Title" xml:space="preserve">
    <value>Neither "Thread.Resume" nor "Thread.Suspend" should be used</value>
  </data>
  <data name="S3889_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3897_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3897_Description" xml:space="preserve">
    <value>The IEquatable&lt;T&gt; interface has only one method in it: Equals(&lt;T&gt;). If you've already written Equals(T), there's no reason not to explicitly implement IEquatable&lt;T&gt;. Doing so expands the utility of your class by allowing it to be used where an IEquatable is called for.</value>
  </data>
  <data name="S3897_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3897_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3897_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3897_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3897_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3897_Tags" xml:space="preserve">
    <value>api-design</value>
  </data>
  <data name="S3897_Title" xml:space="preserve">
    <value>Classes that provide "Equals(&lt;T&gt;)" should implement "IEquatable&lt;T&gt;"</value>
  </data>
  <data name="S3897_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3898_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3898_Description" xml:space="preserve">
    <value>If you're using a struct, it is likely because you're interested in performance. But by failing to implement IEquatable&lt;T&gt; you're loosing performance when comparisons are made because without IEquatable&lt;T&gt;, boxing and reflection are used to make comparisons. </value>
  </data>
  <data name="S3898_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3898_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3898_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S3898_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3898_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3898_Tags" xml:space="preserve">
    <value>performance</value>
  </data>
  <data name="S3898_Title" xml:space="preserve">
    <value>Value types should implement "IEquatable&lt;T&gt;"</value>
  </data>
  <data name="S3898_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3900_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3900_Description" xml:space="preserve">
    <value>A publicly accessible method can be called from anywhere, which means you should validate parameters to be within the expected constraints. In general, checking against null is recommended defensive programming.</value>
  </data>
  <data name="S3900_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3900_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3900_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3900_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3900_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3900_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S3900_Title" xml:space="preserve">
    <value>Arguments of public methods should be validated against null</value>
  </data>
  <data name="S3900_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3902_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3902_Description" xml:space="preserve">
    <value>Using Type.Assembly to get the current assembly is nearly free in terms of performance; it's a simple property access. On the other hand, Assembly.GetExecutingAssembly() can take up to 30 times as long because it walks up the call stack to find the assembly.</value>
  </data>
  <data name="S3902_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3902_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3902_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3902_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3902_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3902_Tags" xml:space="preserve">
    <value>performance</value>
  </data>
  <data name="S3902_Title" xml:space="preserve">
    <value>"Assembly.GetExecutingAssembly" should not be called</value>
  </data>
  <data name="S3902_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3903_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3903_Description" xml:space="preserve">
    <value>Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are defined outside any named namespace are in a global namespace that cannot be referenced in code.</value>
  </data>
  <data name="S3903_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3903_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3903_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3903_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3903_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3903_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3903_Title" xml:space="preserve">
    <value>Types should be defined in named namespaces</value>
  </data>
  <data name="S3903_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3904_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3904_Description" xml:space="preserve">
    <value>If no AssemblyVersionAttribute is provided, the same default version will be used for every build. Since the version number is used by The .NET Framework to uniquely identify an assembly this can lead to broken dependencies.</value>
  </data>
  <data name="S3904_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3904_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3904_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3904_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3904_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3904_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S3904_Title" xml:space="preserve">
    <value>Assemblies should have version information</value>
  </data>
  <data name="S3904_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3906_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3906_Description" xml:space="preserve">
    <value>Delegate event handlers (i.e. delegates used as type of an event) should have a very specific signature:</value>
  </data>
  <data name="S3906_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3906_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3906_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3906_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3906_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3906_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S3906_Title" xml:space="preserve">
    <value>Event Handlers should have the correct signature</value>
  </data>
  <data name="S3906_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3908_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3908_Description" xml:space="preserve">
    <value>Since .Net Framework version 2.0 it is not necessary to declare a delegate that specifies a class derived from System.EventArgs. The System.EventHandler&lt;TEventArgs&gt; delegate mechanism should be used instead as it allows any class derived from EventArgs to be used with that handler.</value>
  </data>
  <data name="S3908_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3908_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3908_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S3908_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3908_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3908_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3908_Title" xml:space="preserve">
    <value>Generic event handlers should be used</value>
  </data>
  <data name="S3908_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3909_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3909_Description" xml:space="preserve">
    <value>The NET Framework 2.0 introduced the generic interface System.Collections.Generic.IEnumerable&lt;T&gt; and it should be preferred over the older, non generic, interfaces.</value>
  </data>
  <data name="S3909_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3909_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3909_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S3909_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3909_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3909_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3909_Title" xml:space="preserve">
    <value>Collections should implement the generic interface</value>
  </data>
  <data name="S3909_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3923_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3923_Description" xml:space="preserve">
    <value>Having all branches in a switch or if chain with the same implementation is an error. Either a copy-paste error was made and something different should be executed, or there shouldn't be a switch/if chain at all.</value>
  </data>
  <data name="S3923_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3923_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3923_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S3923_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3923_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3923_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3923_Title" xml:space="preserve">
    <value>All branches in a conditional structure should not have exactly the same implementation</value>
  </data>
  <data name="S3923_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3925_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3925_Description" xml:space="preserve">
    <value>The ISerializable interface is the mechanism to control the type serialization process. If not implemented correctly this could result in an invalid serialization and hard to detect bugs.</value>
  </data>
  <data name="S3925_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3925_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3925_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S3925_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3925_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3925_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S3925_Title" xml:space="preserve">
    <value>"ISerializable" should be implemented correctly</value>
  </data>
  <data name="S3925_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3926_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3926_Description" xml:space="preserve">
    <value>Fields marked with System.Runtime.Serialization.OptionalFieldAttribute are serialized just like any other field. But such fields are ignored on deserialization, and retain the default values associated with their types. Therefore, deserialization event handlers should be declared to set such fields during the deserialization process.</value>
  </data>
  <data name="S3926_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3926_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3926_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3926_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3926_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3926_Tags" xml:space="preserve">
    <value>serialization</value>
  </data>
  <data name="S3926_Title" xml:space="preserve">
    <value>Deserialization methods should be provided for "OptionalField" members</value>
  </data>
  <data name="S3926_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3927_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3927_Description" xml:space="preserve">
    <value>Serialization event handlers that don't have the correct signature will simply not be called, thus bypassing any attempts to augment the automated de/serialization.</value>
  </data>
  <data name="S3927_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3927_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3927_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S3927_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3927_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3927_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3927_Title" xml:space="preserve">
    <value>Serialization event handlers should be implemented correctly</value>
  </data>
  <data name="S3927_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3928_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3928_Description" xml:space="preserve">
    <value>Some constructors of the ArgumentException, ArgumentNullException, ArgumentOutOfRangeException and DuplicateWaitObjectException classes must be fed with a valid parameter name. This rule raises an issue in two cases:</value>
  </data>
  <data name="S3928_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3928_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3928_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3928_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3928_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3928_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3928_Title" xml:space="preserve">
    <value>Parameter names used into ArgumentException constructors should match an existing one </value>
  </data>
  <data name="S3928_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3937_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3937_Description" xml:space="preserve">
    <value>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus 1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error. </value>
  </data>
  <data name="S3937_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3937_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3937_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3937_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3937_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3937_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S3937_Title" xml:space="preserve">
    <value>Number patterns should be regular</value>
  </data>
  <data name="S3937_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3956_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3956_Description" xml:space="preserve">
    <value>System.Collections.Generic.List&lt;T&gt; is a generic collection that is designed for performance and not inheritance. For example, it does not contain virtual members that make it easier to change the behavior of an inherited class. That means that future attempts to expand the behavior will be spoiled because the extension points simply aren't there. Instead, one of the following generic collections should be used:</value>
  </data>
  <data name="S3956_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3956_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3956_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3956_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S3956_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3956_Tags" xml:space="preserve">
    <value>api-design</value>
  </data>
  <data name="S3956_Title" xml:space="preserve">
    <value>"Generic.List" instances should not be part of public APIs</value>
  </data>
  <data name="S3956_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3962_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3962_Description" xml:space="preserve">
    <value>The value of a static readonly field is computed at runtime while the value of a const field is calculated at compile time, which improves performance.</value>
  </data>
  <data name="S3962_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3962_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3962_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3962_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3962_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3962_Tags" xml:space="preserve">
    <value>performance</value>
  </data>
  <data name="S3962_Title" xml:space="preserve">
    <value>"static readonly" constants should be "const" instead</value>
  </data>
  <data name="S3962_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3963_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3963_Description" xml:space="preserve">
    <value>When a static constructor serves no other purpose that initializing static fields, it comes with an unnecessary performance cost because the compiler generates a check before each static method or instance constructor invocation.</value>
  </data>
  <data name="S3963_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3963_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3963_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3963_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3963_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3963_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3963_Title" xml:space="preserve">
    <value>"static" fields should be initialized inline</value>
  </data>
  <data name="S3963_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3966_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3966_Description" xml:space="preserve">
    <value>A proper implementation of IDisposable.Dispose should allow for it to be called multiple times on the same object, however this is not guaranteed and could result in an exception being thrown.</value>
  </data>
  <data name="S3966_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3966_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3966_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3966_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3966_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3966_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S3966_Title" xml:space="preserve">
    <value>Objects should not be disposed more than once</value>
  </data>
  <data name="S3966_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3967_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S3967_Description" xml:space="preserve">
    <value>A jagged array is an array whose elements are arrays. It is recommended over a multidimensional array because the arrays that make up the elements can be of different sizes, which avoids wasting memory space.</value>
  </data>
  <data name="S3967_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3967_Remediation" xml:space="preserve">
    <value />
  </data>
  <data name="S3967_RemediationCost" xml:space="preserve">
    <value />
  </data>
  <data name="S3967_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3967_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S3967_Tags" xml:space="preserve">
    <value>design</value>
  </data>
  <data name="S3967_Title" xml:space="preserve">
    <value>Multidimensional arrays should not be used</value>
  </data>
  <data name="S3967_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3971_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3971_Description" xml:space="preserve">
    <value>GC.SuppressFinalize requests that the system not call the finalizer for the specified object. This should only be done when implementing Dispose as part of the Dispose Pattern.</value>
  </data>
  <data name="S3971_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3971_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3971_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3971_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3971_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3971_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3971_Title" xml:space="preserve">
    <value>"GC.SuppressFinalize" should not be called</value>
  </data>
  <data name="S3971_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3972_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3972_Description" xml:space="preserve">
    <value>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an if and its resulting then statement. However, when an if is placed on the same line as the closing } from a preceding then, else or else if part, it is either an error - else is missing - or the invitation to a future error as maintainers fail to understand that the two statements are unconnected.</value>
  </data>
  <data name="S3972_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3972_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3972_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3972_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3972_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3972_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S3972_Title" xml:space="preserve">
    <value>Conditionals should start on new lines</value>
  </data>
  <data name="S3972_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3973_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3973_Description" xml:space="preserve">
    <value>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention and good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely unclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</value>
  </data>
  <data name="S3973_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3973_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3973_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3973_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3973_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3973_Tags" xml:space="preserve">
    <value>confusing,suspicious</value>
  </data>
  <data name="S3973_Title" xml:space="preserve">
    <value>A conditionally executed single line should be denoted by indentation</value>
  </data>
  <data name="S3973_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3981_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3981_Description" xml:space="preserve">
    <value>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or equal to zero doesn't make sense, since the result is always true. Similarly testing that it is less than zero will always return false. Perhaps the intent was to check the non-emptiness of the collection or array instead. </value>
  </data>
  <data name="S3981_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3981_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3981_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3981_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3981_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3981_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3981_Title" xml:space="preserve">
    <value>Collection sizes and array length comparisons should make sense</value>
  </data>
  <data name="S3981_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3984_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S3984_Description" xml:space="preserve">
    <value>Creating a new Exception without actually throwing it is useless and is probably due to a mistake.</value>
  </data>
  <data name="S3984_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3984_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3984_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S3984_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3984_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3984_Tags" xml:space="preserve">
    <value>error-handling</value>
  </data>
  <data name="S3984_Title" xml:space="preserve">
    <value>Exception should not be created without being thrown</value>
  </data>
  <data name="S3984_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S3990_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3990_Description" xml:space="preserve">
    <value>Assemblies should conform with the Common Language Specification (CLS) in order to be usable across programming languages. To be compliant an assembly has to indicate it with System.CLSCompliantAttribute.</value>
  </data>
  <data name="S3990_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3990_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3990_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S3990_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3990_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3990_Tags" xml:space="preserve">
    <value>api-design</value>
  </data>
  <data name="S3990_Title" xml:space="preserve">
    <value>Assemblies should be marked as CLS compliant</value>
  </data>
  <data name="S3990_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3992_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3992_Description" xml:space="preserve">
    <value>Assemblies should explicitly indicate whether they are meant to be COM visible or not. If the ComVisibleAttribute is not present, the default is to make the content of the assembly visible to COM clients.</value>
  </data>
  <data name="S3992_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3992_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3992_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S3992_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3992_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3992_Tags" xml:space="preserve">
    <value>api-design</value>
  </data>
  <data name="S3992_Title" xml:space="preserve">
    <value>Assemblies should explicitly specify COM visibility</value>
  </data>
  <data name="S3992_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3993_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3993_Description" xml:space="preserve">
    <value>When defining custom attributes, System.AttributeUsageAttribute must be used to indicate where the attribute can be applied. This will determine its valid locations in the code.</value>
  </data>
  <data name="S3993_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3993_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3993_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3993_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3993_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3993_Tags" xml:space="preserve">
    <value>api-design</value>
  </data>
  <data name="S3993_Title" xml:space="preserve">
    <value>Custom attributes should be marked with "System.AttributeUsageAttribute"</value>
  </data>
  <data name="S3993_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3994_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3994_Description" xml:space="preserve">
    <value>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The System.Uri class is a safe alternative and should be preferred. At minimum, an overload of the method taking a System.Uri as a parameter should be provided in each class that contains a method with an apparent Uri passed as a string.</value>
  </data>
  <data name="S3994_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3994_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3994_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3994_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3994_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3994_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3994_Title" xml:space="preserve">
    <value>URI Parameters should not be strings</value>
  </data>
  <data name="S3994_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3995_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3995_Description" xml:space="preserve">
    <value>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The System.Uri class is a safe alternative and should be preferred.</value>
  </data>
  <data name="S3995_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3995_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3995_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3995_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3995_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3995_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3995_Title" xml:space="preserve">
    <value>URI return values should not be strings</value>
  </data>
  <data name="S3995_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3996_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3996_Description" xml:space="preserve">
    <value>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The System.Uri class is a safe alternative and should be preferred.</value>
  </data>
  <data name="S3996_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3996_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3996_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3996_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3996_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3996_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3996_Title" xml:space="preserve">
    <value>URI properties should not be strings</value>
  </data>
  <data name="S3996_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3997_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S3997_Description" xml:space="preserve">
    <value>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The System.Uri class is a safe alternative and should be preferred.</value>
  </data>
  <data name="S3997_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S3997_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3997_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S3997_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3997_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S3997_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S3997_Title" xml:space="preserve">
    <value>String URI overloads should call "System.Uri" overloads</value>
  </data>
  <data name="S3997_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S3998_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S3998_Description" xml:space="preserve">
    <value>A thread acquiring a lock on an object that can be accessed across application domain boundaries runs the risk of being blocked by another thread in a different application domain. Objects that can be accessed across application domain boundaries are said to have weak identity. Types with weak identity are:</value>
  </data>
  <data name="S3998_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S3998_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S3998_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S3998_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S3998_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S3998_Tags" xml:space="preserve">
    <value>multi-threading,pitfall</value>
  </data>
  <data name="S3998_Title" xml:space="preserve">
    <value>Threads should not lock on objects with weak identity</value>
  </data>
  <data name="S3998_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4000_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S4000_Description" xml:space="preserve">
    <value>The IntPtr and UIntPtr types are used to access unmanaged memory, usually in order to use C or C++ libraries. If such a pointer is not secured by making it private, internal or readonly, it can lead to a vulnerability allowing access to arbitrary locations.</value>
  </data>
  <data name="S4000_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4000_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4000_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4000_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4000_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4000_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4000_Title" xml:space="preserve">
    <value>Pointers to unmanaged memory should not be visible</value>
  </data>
  <data name="S4000_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4002_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4002_Description" xml:space="preserve">
    <value>This rule raises an issue when a disposable type contains fields of the following types and does not implement a finalizer:</value>
  </data>
  <data name="S4002_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4002_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4002_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4002_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4002_Title" xml:space="preserve">
    <value>Disposable types should declare finalizers</value>
  </data>
  <data name="S4002_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4004_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4004_Description" xml:space="preserve">
    <value>A writable collection property can be replaced by a completely different collection. Making it readonly prevents that while still allowing individual members to be set. If you want to allow the replacement of the whole collection the recommended pattern is to implement a method to remove all the elements (e.g. System.Collections.List&lt;T&gt;.Clear) and a method to populate the collection (e.g. System.Collections.List&lt;T&gt;.AddRange).</value>
  </data>
  <data name="S4004_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4004_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4004_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4004_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4004_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4004_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4004_Title" xml:space="preserve">
    <value>Collection properties should be readonly</value>
  </data>
  <data name="S4004_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4005_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4005_Description" xml:space="preserve">
    <value>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The System.Uri class is a safe alternative and should be preferred.</value>
  </data>
  <data name="S4005_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4005_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4005_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4005_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4005_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4005_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4005_Title" xml:space="preserve">
    <value>"System.Uri" arguments should be used instead of strings</value>
  </data>
  <data name="S4005_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4015_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S4015_Description" xml:space="preserve">
    <value>Changing an inherited member to private will not prevent access to the base class implementation.</value>
  </data>
  <data name="S4015_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4015_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4015_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4015_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4015_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4015_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S4015_Title" xml:space="preserve">
    <value>Inherited member visibility should not be decreased</value>
  </data>
  <data name="S4015_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4016_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4016_Description" xml:space="preserve">
    <value>If an enum member's name contains the word "reserved" it implies it is not currently used and will be change in the future. However changing an enum member is a breaking change and can create significant problems. There is no need to reserve an enum member since a new member can be added in the future, and such an addition will usually not be a breaking change.</value>
  </data>
  <data name="S4016_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4016_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4016_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4016_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4016_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4016_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4016_Title" xml:space="preserve">
    <value>Enumeration members should not be named "Reserved"</value>
  </data>
  <data name="S4016_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4017_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4017_Description" xml:space="preserve">
    <value>A nested type is a type argument that is also a generic type. Calling a method with such a nested type argument requires complicated and confusing code. It should be avoided as much as possible.</value>
  </data>
  <data name="S4017_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4017_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4017_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S4017_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4017_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4017_Tags" xml:space="preserve">
    <value>confusing</value>
  </data>
  <data name="S4017_Title" xml:space="preserve">
    <value>Method signatures should not contain nested generic types</value>
  </data>
  <data name="S4017_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4018_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4018_Description" xml:space="preserve">
    <value>The best way to determine the type of a generic method is by inference based on the type of argument that is passed to the method. This is not possible when a parameter type is missing from the argument list.</value>
  </data>
  <data name="S4018_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4018_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4018_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S4018_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4018_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4018_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4018_Title" xml:space="preserve">
    <value>Generic methods should provide type parameters</value>
  </data>
  <data name="S4018_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4019_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S4019_Description" xml:space="preserve">
    <value>When a method in a derived class has the same name as a method in the base class but with a signature that only differs by types that are weakly derived (e.g. object vs string), the result is that the base method becomes hidden.</value>
  </data>
  <data name="S4019_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4019_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4019_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4019_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4019_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4019_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S4019_Title" xml:space="preserve">
    <value>Base class methods should not be hidden</value>
  </data>
  <data name="S4019_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4022_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4022_Description" xml:space="preserve">
    <value>By default the storage type of an enum is Int32. In most cases it is not necessary to change this. In particular you will not achieve any performance gain by using a smaller data type (e.g. Byte) and may limit future uses.</value>
  </data>
  <data name="S4022_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4022_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4022_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4022_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4022_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4022_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4022_Title" xml:space="preserve">
    <value>Enumerations should have "Int32" storage</value>
  </data>
  <data name="S4022_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4023_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4023_Description" xml:space="preserve">
    <value>Empty interfaces are usually used as a marker or a way to identify groups of types. The preferred way to achieve this is to use custom attributes.</value>
  </data>
  <data name="S4023_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4023_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4023_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4023_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4023_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4023_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4023_Title" xml:space="preserve">
    <value>Interfaces should not be empty</value>
  </data>
  <data name="S4023_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4025_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S4025_Description" xml:space="preserve">
    <value>Having a field in a child class with a name that differs from a parent class' field only by capitalization is sure to cause confusion. Such child class fields should be renamed.</value>
  </data>
  <data name="S4025_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4025_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4025_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4025_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4025_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4025_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S4025_Title" xml:space="preserve">
    <value>Child class fields should not differ from parent class fields only by capitalization</value>
  </data>
  <data name="S4025_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4026_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4026_Description" xml:space="preserve">
    <value>It is important to inform the ResourceManager of the language used to display the resources of the neutral culture for an assembly. This improves lookup performance for the first resource loaded. </value>
  </data>
  <data name="S4026_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4026_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4026_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4026_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4026_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4026_Tags" xml:space="preserve">
    <value>performance</value>
  </data>
  <data name="S4026_Title" xml:space="preserve">
    <value>Assemblies should be marked with "NeutralResourcesLanguageAttribute"</value>
  </data>
  <data name="S4026_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4027_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4027_Description" xml:space="preserve">
    <value>Exceptions types should provide the following constructors:</value>
  </data>
  <data name="S4027_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4027_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4027_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S4027_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4027_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4027_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S4027_Title" xml:space="preserve">
    <value>Exceptions should provide standard constructors</value>
  </data>
  <data name="S4027_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4035_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4035_Description" xml:space="preserve">
    <value>When a class implements the IEquatable&lt;T&gt; interface, it enters a contract that, in effect, states "I know how to compare two instances of type T or any type derived from T for equality.". However if that class is derived, it is very unlikely that the base class will know how to make a meaningful comparison. Therefore that implicit contract is now broken.</value>
  </data>
  <data name="S4035_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4035_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4035_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4035_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4035_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4035_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S4035_Title" xml:space="preserve">
    <value>Classes implementing "IEquatable&lt;T&gt;" should be sealed</value>
  </data>
  <data name="S4035_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4039_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S4039_Description" xml:space="preserve">
    <value>When a base type explicitly implements a public interface method, that method is only accessible in derived types through a reference to the current instance (namely this). If the derived type explicitly overrides that interface method, the base implementation becomes inaccessible.</value>
  </data>
  <data name="S4039_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4039_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4039_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4039_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4039_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4039_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S4039_Title" xml:space="preserve">
    <value>Interface methods should be callable by derived types</value>
  </data>
  <data name="S4039_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4040_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4040_Description" xml:space="preserve">
    <value>Certain characters, once normalized to lowercase, cannot make a round trip. That is, they can not be converted from one locale to another and then accurately restored to their original characters.</value>
  </data>
  <data name="S4040_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4040_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4040_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4040_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4040_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4040_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S4040_Title" xml:space="preserve">
    <value>Strings should be normalized to uppercase</value>
  </data>
  <data name="S4040_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4041_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4041_Description" xml:space="preserve">
    <value>When a type name matches the name of a publicly defined namespace, for instance one in the .NET framework class library, it leads to confusion and makes the library that much harder to use.</value>
  </data>
  <data name="S4041_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4041_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4041_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4041_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4041_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4041_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S4041_Title" xml:space="preserve">
    <value>Type names should not match namespaces</value>
  </data>
  <data name="S4041_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4047_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4047_Description" xml:space="preserve">
    <value>When a reference parameter (keyword ref) is used, the passed argument type must exactly match the reference parameter type. This means that to be able to pass a derived type, it must be cast and assigned to a variable of the proper type. Use of generic methods eliminates that cumbersome down casting and should therefore be preferred.</value>
  </data>
  <data name="S4047_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4047_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4047_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S4047_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4047_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4047_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4047_Title" xml:space="preserve">
    <value>Generics should be used when appropriate</value>
  </data>
  <data name="S4047_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4049_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4049_Description" xml:space="preserve">
    <value>Properties are accessed like fields which makes them easier to use.</value>
  </data>
  <data name="S4049_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4049_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4049_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4049_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4049_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4049_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S4049_Title" xml:space="preserve">
    <value>Properties should be preferred</value>
  </data>
  <data name="S4049_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4050_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4050_Description" xml:space="preserve">
    <value>When implementing operator overloads, it is very important to make sure that all related operators and methods are consistent in their implementation.</value>
  </data>
  <data name="S4050_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4050_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4050_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S4050_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4050_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4050_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S4050_Title" xml:space="preserve">
    <value>Operators should be overloaded consistently</value>
  </data>
  <data name="S4050_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4052_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4052_Description" xml:space="preserve">
    <value>With the advent of .NET framework version 2, certain practices have become obsolete.</value>
  </data>
  <data name="S4052_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4052_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4052_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S4052_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4052_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4052_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4052_Title" xml:space="preserve">
    <value>Types should not extend outdated base types</value>
  </data>
  <data name="S4052_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4055_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4055_Description" xml:space="preserve">
    <value>String literals embedded in the source code will not be localized properly.</value>
  </data>
  <data name="S4055_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4055_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4055_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S4055_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4055_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4055_Tags" xml:space="preserve">
    <value>localisation,pitfall</value>
  </data>
  <data name="S4055_Title" xml:space="preserve">
    <value>Literals should not be passed as localized parameters</value>
  </data>
  <data name="S4055_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4056_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4056_Description" xml:space="preserve">
    <value>When a System.Globalization.CultureInfo or IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales.</value>
  </data>
  <data name="S4056_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4056_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4056_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4056_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4056_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4056_Tags" xml:space="preserve">
    <value>localisation,pitfall</value>
  </data>
  <data name="S4056_Title" xml:space="preserve">
    <value>Overloads with a "CultureInfo" or an "IFormatProvider" parameter should be used</value>
  </data>
  <data name="S4056_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4057_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4057_Description" xml:space="preserve">
    <value>When you create a DataTable or DataSet, you should set the locale explicitly. By default, the locale for these types is the current culture. For data that is stored in a database or file and is shared globally, the locale should ordinarily be set to the invariant culture (CultureInfo.InvariantCulture).</value>
  </data>
  <data name="S4057_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4057_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4057_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4057_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4057_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4057_Tags" xml:space="preserve">
    <value>localisation</value>
  </data>
  <data name="S4057_Title" xml:space="preserve">
    <value>Locales should be set for data types</value>
  </data>
  <data name="S4057_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4058_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4058_Description" xml:space="preserve">
    <value>Many string operations, the Compare and Equals methods in particular, provide an overload that accepts a StringComparison enumeration value as a parameter. Calling these overloads and explicitly providing this parameter makes your code clearer and easier to maintain.</value>
  </data>
  <data name="S4058_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4058_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4058_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4058_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4058_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4058_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4058_Title" xml:space="preserve">
    <value>Overloads with a "StringComparison" parameter should be used</value>
  </data>
  <data name="S4058_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4059_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4059_Description" xml:space="preserve">
    <value>Properties and Get method should have names that makes them clearly distinguishable.</value>
  </data>
  <data name="S4059_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4059_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4059_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4059_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4059_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4059_Tags" xml:space="preserve">
    <value>confusing</value>
  </data>
  <data name="S4059_Title" xml:space="preserve">
    <value>Property names should not match get methods</value>
  </data>
  <data name="S4059_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4060_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4060_Description" xml:space="preserve">
    <value>The .NET framework class library provides methods for retrieving custom attributes. Sealing the attribute eliminates the search through the inheritance hierarchy, and can improve performance.</value>
  </data>
  <data name="S4060_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4060_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4060_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4060_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4060_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4060_Tags" xml:space="preserve">
    <value>performance</value>
  </data>
  <data name="S4060_Title" xml:space="preserve">
    <value>Non-abstract attributes should be sealed</value>
  </data>
  <data name="S4060_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4061_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4061_Description" xml:space="preserve">
    <value>A method using the VarArgs calling convention is not Common Language Specification (CLS) compliant and might not be accessible across programming languages, while the params keyword works the same way and is CLS compliant.</value>
  </data>
  <data name="S4061_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4061_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4061_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4061_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4061_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4061_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4061_Title" xml:space="preserve">
    <value>"params" should be used instead of "varargs"</value>
  </data>
  <data name="S4061_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4069_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4069_Description" xml:space="preserve">
    <value>Operator overloading is convenient but unfortunately not portable across languages. To be able to access the same functionality from another language you need to provide an alternate named method following the convention:</value>
  </data>
  <data name="S4069_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4069_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4069_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4069_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4069_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4069_Tags" xml:space="preserve">
    <value>convention</value>
  </data>
  <data name="S4069_Title" xml:space="preserve">
    <value>Operator overloads should have named alternatives</value>
  </data>
  <data name="S4069_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4070_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4070_Description" xml:space="preserve">
    <value>This rule raises an issue when an externally visible enumeration is marked with FlagsAttribute and one, or more, of its values is not a power of 2 or a combination of the other defined values.</value>
  </data>
  <data name="S4070_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4070_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4070_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4070_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4070_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4070_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4070_Title" xml:space="preserve">
    <value>Non-flags enums should not be marked with "FlagsAttribute"</value>
  </data>
  <data name="S4070_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4142_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4142_Description" xml:space="preserve">
    <value>There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was intended for one of the arguments.</value>
  </data>
  <data name="S4142_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4142_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4142_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4142_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4142_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4142_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4142_Title" xml:space="preserve">
    <value>Duplicate values should not be passed as arguments</value>
  </data>
  <data name="S4142_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4143_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S4143_Description" xml:space="preserve">
    <value>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</value>
  </data>
  <data name="S4143_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4143_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4143_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4143_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4143_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4143_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S4143_Title" xml:space="preserve">
    <value>Collection elements should not be replaced unconditionally</value>
  </data>
  <data name="S4143_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4144_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4144_Description" xml:space="preserve">
    <value>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may be confusing to maintainers. In the latter case, one implementation should invoke the other.</value>
  </data>
  <data name="S4144_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4144_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4144_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S4144_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4144_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4144_Tags" xml:space="preserve">
    <value>confusing,duplicate,suspicious</value>
  </data>
  <data name="S4144_Title" xml:space="preserve">
    <value>Methods should not have identical implementations</value>
  </data>
  <data name="S4144_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4158_Category" xml:space="preserve">
    <value>Minor Bug</value>
  </data>
  <data name="S4158_Description" xml:space="preserve">
    <value>When a collection is empty it makes no sense to access or iterate it. Doing so anyway is surely an error; either population was accidentally omitted or the developer doesn't understand the situation.</value>
  </data>
  <data name="S4158_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4158_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4158_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S4158_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4158_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4158_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4158_Title" xml:space="preserve">
    <value>Empty collections should not be accessed or iterated</value>
  </data>
  <data name="S4158_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4159_Category" xml:space="preserve">
    <value>Blocker Bug</value>
  </data>
  <data name="S4159_Description" xml:space="preserve">
    <value>In the Attributed Programming Model, the ExportAttribute declares that a part "exports", or provides to the composition container, an object that fulfills a particular contract. During composition, parts with imports that have matching contracts will have those dependencies filled by the exported object.</value>
  </data>
  <data name="S4159_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4159_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4159_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S4159_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4159_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S4159_Tags" xml:space="preserve">
    <value>mef,pitfall</value>
  </data>
  <data name="S4159_Title" xml:space="preserve">
    <value>Classes should implement their "ExportAttribute" interfaces</value>
  </data>
  <data name="S4159_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4200_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4200_Description" xml:space="preserve">
    <value>Native methods are functions that reside in libraries outside the virtual machine. Being able to call them is useful for interoperability with applications and libraries written in other programming languages, in particular when performing platform-specific operations. However doing so comes with extra risks since it means stepping out of the security model of the virtual machine. It is therefore highly recommended to take extra steps, like input validation, when invoking native methods. This is best done by making the native method private and by providing a wrapper that performs these extra steps and verifications.</value>
  </data>
  <data name="S4200_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4200_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4200_RemediationCost" xml:space="preserve">
    <value>30min</value>
  </data>
  <data name="S4200_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4200_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4200_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S4200_Title" xml:space="preserve">
    <value>Native methods should be wrapped</value>
  </data>
  <data name="S4200_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4210_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S4210_Description" xml:space="preserve">
    <value>When an assembly uses Windows Forms (classes and interfaces from the System.Windows.Forms namespace) its entry point should be marked with the STAThreadAttribute to indicate that the threading model should be "Single-Threaded Apartment" (STA) which is the only one supported by Windows Forms.</value>
  </data>
  <data name="S4210_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4210_Remediation" xml:space="preserve">
    <value />
  </data>
  <data name="S4210_RemediationCost" xml:space="preserve">
    <value />
  </data>
  <data name="S4210_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4210_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4210_Tags" xml:space="preserve">
    <value>winforms,pitfall</value>
  </data>
  <data name="S4210_Title" xml:space="preserve">
    <value>Windows Forms entry points should be marked with STAThread</value>
  </data>
  <data name="S4210_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4211_Category" xml:space="preserve">
    <value>Major Vulnerability</value>
  </data>
  <data name="S4211_Description" xml:space="preserve">
    <value>Transparency attributes, SecurityCriticalAttribute and SecuritySafeCriticalAttribute are used to identify code that performs security-critical operations. The second one indicates that it is safe to call this code from transparent, while the first one does not. Since the transparency attributes of code elements with larger scope take precedence over transparency attributes of code elements that are contained in the first element a class, for instance, with a SecurityCriticalAttribute can not contain a method with a SecuritySafeCriticalAttribute.</value>
  </data>
  <data name="S4211_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4211_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4211_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4211_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4211_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4211_Tags" xml:space="preserve">
    <value>owasp-a6,pitfall</value>
  </data>
  <data name="S4211_Title" xml:space="preserve">
    <value>Members should not have conflicting transparency annotations</value>
  </data>
  <data name="S4211_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S4212_Category" xml:space="preserve">
    <value>Critical Vulnerability</value>
  </data>
  <data name="S4212_Description" xml:space="preserve">
    <value>Because serialization constructors allocate and initialize objects, security checks that are present on regular constructors must also be present on a serialization constructor. Failure to do so would allow callers that could not otherwise create an instance to use the serialization constructor to do this.</value>
  </data>
  <data name="S4212_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4212_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4212_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4212_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4212_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4212_Tags" xml:space="preserve">
    <value>serialization,owasp-a8</value>
  </data>
  <data name="S4212_Title" xml:space="preserve">
    <value>Serialization constructors should be secured</value>
  </data>
  <data name="S4212_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S4214_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4214_Description" xml:space="preserve">
    <value>Methods marked with the System.Runtime.InteropServices.DllImportAttribute attribute use Platform Invocation Services to access unmanaged code and should not be exposed. Keeping them private or internal makes sure that their access is controlled and properly managed.</value>
  </data>
  <data name="S4214_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4214_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4214_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4214_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4214_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4214_Tags" xml:space="preserve">
    <value>pinvoke</value>
  </data>
  <data name="S4214_Title" xml:space="preserve">
    <value>"P/Invoke" methods should not be visible</value>
  </data>
  <data name="S4214_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4220_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4220_Description" xml:space="preserve">
    <value>When raising an event, two arguments are expected by the EventHandler delegate: Sender and event-data. There are three guidelines regarding these parameters:</value>
  </data>
  <data name="S4220_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4220_Remediation" xml:space="preserve">
    <value />
  </data>
  <data name="S4220_RemediationCost" xml:space="preserve">
    <value />
  </data>
  <data name="S4220_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4220_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4220_Tags" xml:space="preserve">
    <value>event,pitfall</value>
  </data>
  <data name="S4220_Title" xml:space="preserve">
    <value>Events should have proper arguments</value>
  </data>
  <data name="S4220_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4225_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4225_Description" xml:space="preserve">
    <value>Creating an extension method that extends object is not recommended because it makes the method available on every type. Extensions should be applied at the most specialized level possible, and that is very unlikely to be object.</value>
  </data>
  <data name="S4225_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4225_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4225_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S4225_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4225_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4225_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4225_Title" xml:space="preserve">
    <value>Extension methods should not extend "object"</value>
  </data>
  <data name="S4225_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4226_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4226_Description" xml:space="preserve">
    <value>It makes little sense to create an extension method when it is possible to just add that method to the class itself.</value>
  </data>
  <data name="S4226_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4226_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4226_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S4226_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4226_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4226_Tags" xml:space="preserve">
    <value>confusing</value>
  </data>
  <data name="S4226_Title" xml:space="preserve">
    <value>Extensions should be in separate namespaces</value>
  </data>
  <data name="S4226_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4260_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S4260_Description" xml:space="preserve">
    <value>When creating a custom Markup Extension that accepts parameters in WPF, the ConstructorArgument markup must be used to identify the discrete properties that match these parameters. However since this is done via a string, the compiler will not notice if there are typos.</value>
  </data>
  <data name="S4260_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4260_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4260_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4260_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4260_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4260_Tags" xml:space="preserve">
    <value>xaml,wpf</value>
  </data>
  <data name="S4260_Title" xml:space="preserve">
    <value>"ConstructorArgument" parameters should exist in constructors</value>
  </data>
  <data name="S4260_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4261_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S4261_Description" xml:space="preserve">
    <value>According to the Task-based Asynchronous Pattern (TAP), methods returning either a System.Threading.Tasks.Task or a System.Threading.Tasks.Task&lt;TResult&gt; are considered "asynchronous". Such methods should use the Async suffix. Conversely methods which do not return such Tasks should not have an "Async" suffix in their names.</value>
  </data>
  <data name="S4261_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4261_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4261_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4261_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4261_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S4261_Tags" xml:space="preserve">
    <value>convention,async-await,confusing</value>
  </data>
  <data name="S4261_Title" xml:space="preserve">
    <value>Methods should be named according to their synchronicities</value>
  </data>
  <data name="S4261_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4275_Category" xml:space="preserve">
    <value>Critical Bug</value>
  </data>
  <data name="S4275_Description" xml:space="preserve">
    <value>Properties provide a way to enforce encapsulation by providing public, protected or internal methods that give controlled access to private fields. However in classes with multiple fields it is not unusual that cut and paste is used to quickly create the needed properties, which can result in the wrong field being accessed by a getter or setter.</value>
  </data>
  <data name="S4275_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4275_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4275_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4275_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4275_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4275_Tags" xml:space="preserve">
    <value>pitfall</value>
  </data>
  <data name="S4275_Title" xml:space="preserve">
    <value>Getters and setters should access the expected fields</value>
  </data>
  <data name="S4275_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4277_Category" xml:space="preserve">
    <value>Critical Bug</value>
  </data>
  <data name="S4277_Description" xml:space="preserve">
    <value>Marking a class with PartCreationPolicy(CreationPolicy.Shared), which is part of Managed Extensibility Framework (MEF), means that a single, shared instance of the exported object will be created. Therefore it doesn't make sense to create new instances using the constructor and it will most likely result in unexpected behaviours.</value>
  </data>
  <data name="S4277_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4277_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4277_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4277_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4277_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4277_Tags" xml:space="preserve">
    <value>mef,pitfall</value>
  </data>
  <data name="S4277_Title" xml:space="preserve">
    <value>"Shared" parts should not be created with "new"</value>
  </data>
  <data name="S4277_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4426_Category" xml:space="preserve">
    <value>Blocker Vulnerability</value>
  </data>
  <data name="S4426_Description" xml:space="preserve">
    <value>When generating cryptograpic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force attacks. For the RSA algorithm the key should be at </value>
  </data>
  <data name="S4426_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4426_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4426_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4426_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4426_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S4426_Tags" xml:space="preserve">
    <value>cwe,owasp-a3</value>
  </data>
  <data name="S4426_Title" xml:space="preserve">
    <value>Cryptographic keys should not be too short</value>
  </data>
  <data name="S4426_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S4428_Category" xml:space="preserve">
    <value>Major Bug</value>
  </data>
  <data name="S4428_Description" xml:space="preserve">
    <value>The PartCreationPolicyAttribute attribute, which is part of the Managed Extensibility Framework (MEF), is used to specify how the exported object will be created. Therefore it doesn't make sense not to export this a class with this attribute using the ExportAttribute attribute.</value>
  </data>
  <data name="S4428_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4428_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4428_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4428_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4428_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4428_Tags" xml:space="preserve">
    <value>mef,pitfall</value>
  </data>
  <data name="S4428_Title" xml:space="preserve">
    <value>"PartCreationPolicyAttribute" should be used with "ExportAttribute"</value>
  </data>
  <data name="S4428_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4432_Category" xml:space="preserve">
    <value>Critical Vulnerability</value>
  </data>
  <data name="S4432_Description" xml:space="preserve">
    <value>Encryption algorithms can be used with various modes. Some combinations are not secured:</value>
  </data>
  <data name="S4432_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4432_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4432_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S4432_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4432_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4432_Tags" xml:space="preserve">
    <value>cwe,owasp-a6,sans-top25-porous</value>
  </data>
  <data name="S4432_Title" xml:space="preserve">
    <value>AES encryption algorithm should be used with secured mode</value>
  </data>
  <data name="S4432_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S4433_Category" xml:space="preserve">
    <value>Critical Vulnerability</value>
  </data>
  <data name="S4433_Description" xml:space="preserve">
    <value>An un-authenticated LDAP connection can lead to transactions without access control. Authentication, and with it, access control, are the last line of defense against LDAP injections and should not be disabled.</value>
  </data>
  <data name="S4433_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4433_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4433_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S4433_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4433_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4433_Tags" xml:space="preserve">
    <value>cwe,owasp-a2</value>
  </data>
  <data name="S4433_Title" xml:space="preserve">
    <value>LDAP connections should be authenticated</value>
  </data>
  <data name="S4433_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S4456_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4456_Description" xml:space="preserve">
    <value>Because of the way yield methods are rewritten by the compiler (they become lazily evaluated state machines) any exceptions thrown during the parameters check will happen only when the collection is iterated over. That could happen far away from the source of the buggy code.</value>
  </data>
  <data name="S4456_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4456_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4456_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S4456_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4456_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4456_Tags" xml:space="preserve">
    <value>yield</value>
  </data>
  <data name="S4456_Title" xml:space="preserve">
    <value>Parameter validation in yielding methods should be wrapped</value>
  </data>
  <data name="S4456_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4457_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4457_Description" xml:space="preserve">
    <value>Because of the way async/await methods are rewritten by the compiler, any exceptions thrown during the parameters check will happen only when the task is observed. That could happen far away from the source of the buggy code or never happen for fire-and-forget tasks.</value>
  </data>
  <data name="S4457_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4457_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4457_RemediationCost" xml:space="preserve">
    <value>15min</value>
  </data>
  <data name="S4457_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4457_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4457_Tags" xml:space="preserve">
    <value>async-await</value>
  </data>
  <data name="S4457_Title" xml:space="preserve">
    <value>Parameter validation in "async"/"await" methods should be wrapped</value>
  </data>
  <data name="S4457_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4462_Category" xml:space="preserve">
    <value>Blocker Code Smell</value>
  </data>
  <data name="S4462_Description" xml:space="preserve">
    <value>Making blocking calls to async methods transforms something that was intended to be asynchronous into a synchronous block. Doing so can cause deadlocks and unexpected blocking of context threads.</value>
  </data>
  <data name="S4462_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4462_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4462_RemediationCost" xml:space="preserve">
    <value>20min</value>
  </data>
  <data name="S4462_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4462_Severity" xml:space="preserve">
    <value>Blocker</value>
  </data>
  <data name="S4462_Tags" xml:space="preserve">
    <value>async-await,deadlock</value>
  </data>
  <data name="S4462_Title" xml:space="preserve">
    <value>Calls to "async" methods should not be blocking</value>
  </data>
  <data name="S4462_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4507_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S4507_Description" xml:space="preserve">
    <value>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S4507_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4507_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4507_RemediationCost" xml:space="preserve">
    <value>1min</value>
  </data>
  <data name="S4507_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4507_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4507_Tags" xml:space="preserve">
    <value>cwe,owasp-a3</value>
  </data>
  <data name="S4507_Title" xml:space="preserve">
    <value>Delivering code in production with debug features activated is security-sensitive</value>
  </data>
  <data name="S4507_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S4524_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S4524_Description" xml:space="preserve">
    <value>switch can contain a default clause for various reasons: to handle unexpected values, to show that all the cases were properly considered.</value>
  </data>
  <data name="S4524_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4524_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4524_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4524_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4524_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4524_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4524_Title" xml:space="preserve">
    <value>"default" clauses should be first or last</value>
  </data>
  <data name="S4524_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4564_Category" xml:space="preserve">
    <value>Major Vulnerability</value>
  </data>
  <data name="S4564_Description" xml:space="preserve">
    <value>ASP.Net has a feature to validate HTTP requests to prevent potentially dangerous content to perform a cross-site scripting (XSS) attack. There is no reason to disable this mechanism even if other checks to prevent XXS attacks are in place.</value>
  </data>
  <data name="S4564_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S4564_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4564_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S4564_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4564_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4564_Tags" xml:space="preserve">
    <value>cwe,sans-top25-insecure,owasp-a7</value>
  </data>
  <data name="S4564_Title" xml:space="preserve">
    <value>ASP.NET HTTP request validation feature should not be disabled</value>
  </data>
  <data name="S4564_Type" xml:space="preserve">
    <value>VULNERABILITY</value>
  </data>
  <data name="S4581_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S4581_Description" xml:space="preserve">
    <value>When the syntax new Guid() (i.e. parameterless instantiation) is used, it must be that one of three things is wanted:</value>
  </data>
  <data name="S4581_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4581_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4581_RemediationCost" xml:space="preserve">
    <value>5 min</value>
  </data>
  <data name="S4581_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4581_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S4581_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4581_Title" xml:space="preserve">
    <value>"new Guid()" should not be used</value>
  </data>
  <data name="S4581_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S4586_Category" xml:space="preserve">
    <value>Critical Bug</value>
  </data>
  <data name="S4586_Description" xml:space="preserve">
    <value>Returning null from a non-async Task/Task&lt;T&gt; method will cause a NullReferenceException at runtime. This problem can be avoided by returning Task.FromResult&lt;T&gt;(null) instead.</value>
  </data>
  <data name="S4586_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4586_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S4586_RemediationCost" xml:space="preserve">
    <value>5 min</value>
  </data>
  <data name="S4586_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S4586_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4586_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S4586_Title" xml:space="preserve">
    <value>Non-async "Task/Task&lt;T&gt;" methods should not return null</value>
  </data>
  <data name="S4586_Type" xml:space="preserve">
    <value>BUG</value>
  </data>
  <data name="S4784_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S4784_Description" xml:space="preserve">
    <value>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S4784_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4784_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4784_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4784_Tags" xml:space="preserve">
    <value>cwe,owasp-a1</value>
  </data>
  <data name="S4784_Title" xml:space="preserve">
    <value>Using regular expressions is security-sensitive</value>
  </data>
  <data name="S4784_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S4787_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S4787_Description" xml:space="preserve">
    <value>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S4787_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4787_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4787_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4787_Tags" xml:space="preserve">
    <value>cwe,owasp-a6,sans-top25-porous,owasp-a3</value>
  </data>
  <data name="S4787_Title" xml:space="preserve">
    <value>Encrypting data is security-sensitive</value>
  </data>
  <data name="S4787_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S4790_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S4790_Description" xml:space="preserve">
    <value>Hashing data is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S4790_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4790_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4790_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4790_Tags" xml:space="preserve">
    <value>cwe,spring,owasp-a6,sans-top25-porous,owasp-a3</value>
  </data>
  <data name="S4790_Title" xml:space="preserve">
    <value>Hashing data is security-sensitive</value>
  </data>
  <data name="S4790_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S4792_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S4792_Description" xml:space="preserve">
    <value>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S4792_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4792_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4792_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4792_Tags" xml:space="preserve">
    <value>cwe,owasp-a10,sans-top25-porous,owasp-a3</value>
  </data>
  <data name="S4792_Title" xml:space="preserve">
    <value>Configuring loggers is security-sensitive</value>
  </data>
  <data name="S4792_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S4818_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S4818_Description" xml:space="preserve">
    <value>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S4818_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4818_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4818_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4818_Tags" xml:space="preserve">
    <value>cwe,sans-top25-risky,sans-top25-porous,owasp-a3</value>
  </data>
  <data name="S4818_Title" xml:space="preserve">
    <value>Using Sockets is security-sensitive</value>
  </data>
  <data name="S4818_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S4823_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S4823_Description" xml:space="preserve">
    <value>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S4823_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4823_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4823_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4823_Tags" xml:space="preserve">
    <value>cwe,owasp-a1,sans-top25-insecure</value>
  </data>
  <data name="S4823_Title" xml:space="preserve">
    <value>Using command line arguments is security-sensitive</value>
  </data>
  <data name="S4823_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S4829_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S4829_Description" xml:space="preserve">
    <value>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S4829_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4829_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4829_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4829_Tags" xml:space="preserve">
    <value>cwe</value>
  </data>
  <data name="S4829_Title" xml:space="preserve">
    <value>Reading the Standard Input is security-sensitive</value>
  </data>
  <data name="S4829_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S4834_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S4834_Description" xml:space="preserve">
    <value>Controlling permissions is security-sensitive. It has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S4834_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S4834_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S4834_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S4834_Tags" xml:space="preserve">
    <value>sans-top25-porous,owasp-a5</value>
  </data>
  <data name="S4834_Title" xml:space="preserve">
    <value>Controlling permissions is security-sensitive</value>
  </data>
  <data name="S4834_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S5042_Category" xml:space="preserve">
    <value>Critical Security Hotspot</value>
  </data>
  <data name="S5042_Description" xml:space="preserve">
    <value>Expanding archive files is security-sensitive. For example, expanding archive files has led in the past to the following vulnerabilities:</value>
  </data>
  <data name="S5042_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S5042_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S5042_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S5042_Scope" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="S5042_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S5042_Tags" xml:space="preserve">
    <value>cwe,owasp-a1</value>
  </data>
  <data name="S5042_Title" xml:space="preserve">
    <value>Expanding archive files is security-sensitive</value>
  </data>
  <data name="S5042_Type" xml:space="preserve">
    <value>SECURITY_HOTSPOT</value>
  </data>
  <data name="S818_Category" xml:space="preserve">
    <value>Minor Code Smell</value>
  </data>
  <data name="S818_Description" xml:space="preserve">
    <value>Using upper case literal suffixes removes the potential ambiguity between "1" (digit 1) and "l" (letter el) for declaring literals.</value>
  </data>
  <data name="S818_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S818_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S818_RemediationCost" xml:space="preserve">
    <value>2min</value>
  </data>
  <data name="S818_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S818_Severity" xml:space="preserve">
    <value>Minor</value>
  </data>
  <data name="S818_Tags" xml:space="preserve">
    <value>convention,pitfall</value>
  </data>
  <data name="S818_Title" xml:space="preserve">
    <value>Literal suffixes should be upper case</value>
  </data>
  <data name="S818_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S881_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S881_Description" xml:space="preserve">
    <value>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</value>
  </data>
  <data name="S881_IsActivatedByDefault" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="S881_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S881_RemediationCost" xml:space="preserve">
    <value>5min</value>
  </data>
  <data name="S881_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S881_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S881_Tags" xml:space="preserve">
    <value />
  </data>
  <data name="S881_Title" xml:space="preserve">
    <value>Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression</value>
  </data>
  <data name="S881_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S907_Category" xml:space="preserve">
    <value>Major Code Smell</value>
  </data>
  <data name="S907_Description" xml:space="preserve">
    <value>goto is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such as if, for, while, continue or break should be used instead.</value>
  </data>
  <data name="S907_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S907_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S907_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S907_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S907_Severity" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="S907_Tags" xml:space="preserve">
    <value>brain-overload</value>
  </data>
  <data name="S907_Title" xml:space="preserve">
    <value>"goto" statement should not be used</value>
  </data>
  <data name="S907_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="S927_Category" xml:space="preserve">
    <value>Critical Code Smell</value>
  </data>
  <data name="S927_Description" xml:space="preserve">
    <value>The name of a parameter in an externally visible method override does not match the name of the parameter in the base declaration of the method, or the name of the parameter in the interface declaration of the method or the name of any other partial definition.</value>
  </data>
  <data name="S927_IsActivatedByDefault" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="S927_Remediation" xml:space="preserve">
    <value>Constant/Issue</value>
  </data>
  <data name="S927_RemediationCost" xml:space="preserve">
    <value>10min</value>
  </data>
  <data name="S927_Scope" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="S927_Severity" xml:space="preserve">
    <value>Critical</value>
  </data>
  <data name="S927_Tags" xml:space="preserve">
    <value>suspicious</value>
  </data>
  <data name="S927_Title" xml:space="preserve">
    <value>parameter names should match base declaration and other partial definitions</value>
  </data>
  <data name="S927_Type" xml:space="preserve">
    <value>CODE_SMELL</value>
  </data>
  <data name="HelpLinkFormat" xml:space="preserve">
    <value>https://rules.sonarsource.com/csharp/RSPEC-{0}</value>
  </data>
  <data name="RoslynLanguage" xml:space="preserve">
    <value>C#</value>
  </data>
</root>